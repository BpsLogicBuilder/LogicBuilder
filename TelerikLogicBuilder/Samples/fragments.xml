<folder name="Decisions" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="fragments.xsd">
  <folder name="Lambda">
    <fragment name="ParameterOperatorParameter(}sbsbss" description="">
      <constructor name="ParameterOperatorParameters" visibleText="ParameterOperatorParameters: parameterName=$it">
        <genericArguments />
        <parameters>
          <literalParameter name="parameterName">$it</literalParameter>
        </parameters>
      </constructor>
    </fragment>
  </folder>
  <folder name="Editing">
    <fragment name="ParameterOperatorParameters1">
      <constructor name="ParameterOperatorParameters" visibleText="ParameterOperatorParameters: parameterName=$it">
        <genericArguments />
        <parameters>
          <literalParameter name="parameterName">$it</literalParameter>
        </parameters>
      </constructor>
    </fragment>
    <folder name="selectors">
      <fragment name="DropDownTemplateControl">
        <constructor name="FormControlSettingsParameters" visibleText="FormControlSettingsParameters: field=County;title=County;placeholder=County (required);stringFormat={0};Type: type;FieldValidationSettingsParameters: validationSetting;DropDownTemplateParameters: dropDownTemplate;fieldTypeSource=Enrollment.Domain.Entities.PersonalModel">
          <genericArguments />
          <parameters>
            <literalParameter name="field">County</literalParameter>
            <literalParameter name="title">County</literalParameter>
            <literalParameter name="placeholder">County (required)</literalParameter>
            <literalParameter name="stringFormat">{0}</literalParameter>
            <objectParameter name="type">
              <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.String">
                <genericArguments />
                <parameters>
                  <literalParameter name="assemblyQualifiedTypeName">System.String</literalParameter>
                </parameters>
              </function>
            </objectParameter>
            <objectParameter name="validationSetting">
              <constructor name="FieldValidationSettingsParameters" visibleText="FieldValidationSettingsParameters: Object: defaultValue">
                <genericArguments />
                <parameters>
                  <objectParameter name="defaultValue">
                    <function name="Cast" visibleText="Cast: From=">
                      <genericArguments>
                        <literalParameter genericArgumentName="From">
                          <literalType>String</literalType>
                          <control>SingleLineTextBox</control>
                          <useForEquality>true</useForEquality>
                          <useForHashCode>false</useForHashCode>
                          <useForToString>true</useForToString>
                          <propertySource />
                          <propertySourceParameter />
                          <defaultValue />
                          <domain />
                        </literalParameter>
                        <objectParameter genericArgumentName="To">
                          <objectType>System.Object</objectType>
                          <useForEquality>false</useForEquality>
                          <useForHashCode>false</useForHashCode>
                          <useForToString>true</useForToString>
                        </objectParameter>
                      </genericArguments>
                      <parameters>
                        <literalParameter name="From" />
                      </parameters>
                    </function>
                  </objectParameter>
                  <objectListParameter name="validators">
                    <objectList objectType="Enrollment.Forms.Parameters.Validation.ValidatorDefinitionParameters" listType="GenericList" visibleText="validators: Count(1)">
                      <object>
                        <constructor name="ValidatorDefinitionParameters" visibleText="ValidatorDefinitionParameters: className=RequiredRule;functionName=Check">
                          <genericArguments />
                          <parameters>
                            <literalParameter name="className">RequiredRule</literalParameter>
                            <literalParameter name="functionName">Check</literalParameter>
                          </parameters>
                        </constructor>
                      </object>
                    </objectList>
                  </objectListParameter>
                </parameters>
              </constructor>
            </objectParameter>
            <objectParameter name="dropDownTemplate">
              <constructor name="DropDownTemplateParameters" visibleText="DropDownTemplateParameters: templateName=PickerTemplate;titleText=Select County:;textField=Text;valueField=Value;loadingIndicatorText=Loading ...;SelectorLambdaOperatorParameters: textAndValueSelector;RequestDetailsParameters: requestDetails;reloadItemsFlowName=personalcountyselector;fieldTypeSource=Enrollment.Domain.Entities.LookUpsModel">
                <genericArguments />
                <parameters>
                  <literalParameter name="templateName">PickerTemplate</literalParameter>
                  <literalParameter name="titleText">Select County:</literalParameter>
                  <literalParameter name="textField">Text</literalParameter>
                  <literalParameter name="valueField">Value</literalParameter>
                  <literalParameter name="loadingIndicatorText">Loading ...</literalParameter>
                  <objectParameter name="textAndValueSelector">
                    <constructor name="SelectorLambdaOperatorParameters" visibleText="SelectorLambdaOperatorParameters: IExpressionParameter: selector;Type: sourceElementType;parameterName=$it;Type: bodyType">
                      <genericArguments />
                      <parameters>
                        <objectParameter name="selector">
                          <constructor name="SelectOperatorParameters" visibleText="SelectOperatorParameters: IExpressionParameter: sourceOperand;IExpressionParameter: selectorBody;selectorParameterName=s">
                            <genericArguments />
                            <parameters>
                              <objectParameter name="sourceOperand">
                                <constructor name="OrderByOperatorParameters" visibleText="OrderByOperatorParameters: IExpressionParameter: sourceOperand;IExpressionParameter: selectorBody;ListSortDirection: sortDirection;selectorParameterName=l">
                                  <genericArguments />
                                  <parameters>
                                    <objectParameter name="sourceOperand">
                                      <constructor name="WhereOperatorParameters" visibleText="WhereOperatorParameters: IExpressionParameter: sourceOperand;IExpressionParameter: filterBody;filterParameterName=l">
                                        <genericArguments />
                                        <parameters>
                                          <objectParameter name="sourceOperand">
                                            <constructor name="ParameterOperatorParameters" visibleText="ParameterOperatorParameters: parameterName=$it">
                                              <genericArguments />
                                              <parameters>
                                                <literalParameter name="parameterName">$it</literalParameter>
                                              </parameters>
                                            </constructor>
                                          </objectParameter>
                                          <objectParameter name="filterBody">
                                            <constructor name="EqualsBinaryOperatorParameters" visibleText="EqualsBinaryOperatorParameters: IExpressionParameter: left;IExpressionParameter: right">
                                              <genericArguments />
                                              <parameters>
                                                <objectParameter name="left">
                                                  <constructor name="MemberSelectorOperatorParameters" visibleText="MemberSelectorOperatorParameters: memberFullName=ListName;IExpressionParameter: sourceOperand">
                                                    <genericArguments />
                                                    <parameters>
                                                      <literalParameter name="memberFullName">ListName</literalParameter>
                                                      <objectParameter name="sourceOperand">
                                                        <constructor name="ParameterOperatorParameters" visibleText="ParameterOperatorParameters: parameterName=l">
                                                          <genericArguments />
                                                          <parameters>
                                                            <literalParameter name="parameterName">l</literalParameter>
                                                          </parameters>
                                                        </constructor>
                                                      </objectParameter>
                                                    </parameters>
                                                  </constructor>
                                                </objectParameter>
                                                <objectParameter name="right">
                                                  <constructor name="ConstantOperatorParameters" visibleText="ConstantOperatorParameters: Object: constantValue;Type: type">
                                                    <genericArguments />
                                                    <parameters>
                                                      <objectParameter name="constantValue">
                                                        <function name="Cast" visibleText="Cast: From=counties">
                                                          <genericArguments>
                                                            <literalParameter genericArgumentName="From">
                                                              <literalType>String</literalType>
                                                              <control>SingleLineTextBox</control>
                                                              <useForEquality>true</useForEquality>
                                                              <useForHashCode>false</useForHashCode>
                                                              <useForToString>true</useForToString>
                                                              <propertySource />
                                                              <propertySourceParameter />
                                                              <defaultValue />
                                                              <domain />
                                                            </literalParameter>
                                                            <objectParameter genericArgumentName="To">
                                                              <objectType>System.Object</objectType>
                                                              <useForEquality>false</useForEquality>
                                                              <useForHashCode>false</useForHashCode>
                                                              <useForToString>true</useForToString>
                                                            </objectParameter>
                                                          </genericArguments>
                                                          <parameters>
                                                            <literalParameter name="From">counties</literalParameter>
                                                          </parameters>
                                                        </function>
                                                      </objectParameter>
                                                      <objectParameter name="type">
                                                        <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.String">
                                                          <genericArguments />
                                                          <parameters>
                                                            <literalParameter name="assemblyQualifiedTypeName">System.String</literalParameter>
                                                          </parameters>
                                                        </function>
                                                      </objectParameter>
                                                    </parameters>
                                                  </constructor>
                                                </objectParameter>
                                              </parameters>
                                            </constructor>
                                          </objectParameter>
                                          <literalParameter name="filterParameterName">l</literalParameter>
                                        </parameters>
                                      </constructor>
                                    </objectParameter>
                                    <objectParameter name="selectorBody">
                                      <constructor name="MemberSelectorOperatorParameters" visibleText="MemberSelectorOperatorParameters: memberFullName=Text;IExpressionParameter: sourceOperand">
                                        <genericArguments />
                                        <parameters>
                                          <literalParameter name="memberFullName">Text</literalParameter>
                                          <objectParameter name="sourceOperand">
                                            <constructor name="ParameterOperatorParameters" visibleText="ParameterOperatorParameters: parameterName=l">
                                              <genericArguments />
                                              <parameters>
                                                <literalParameter name="parameterName">l</literalParameter>
                                              </parameters>
                                            </constructor>
                                          </objectParameter>
                                        </parameters>
                                      </constructor>
                                    </objectParameter>
                                    <objectParameter name="sortDirection">
                                      <variable name="ListSortDirection_Ascending" visibleText="ListSortDirection_Ascending" />
                                    </objectParameter>
                                    <literalParameter name="selectorParameterName">l</literalParameter>
                                  </parameters>
                                </constructor>
                              </objectParameter>
                              <objectParameter name="selectorBody">
                                <constructor name="MemberInitOperatorParameters" visibleText="MemberInitOperatorParameters: Type: newType">
                                  <genericArguments />
                                  <parameters>
                                    <objectListParameter name="memberBindings">
                                      <objectList objectType="Enrollment.Parameters.Expressions.MemberBindingItem" listType="GenericList" visibleText="memberBindings: Count(2)">
                                        <object>
                                          <constructor name="MemberBindingItem" visibleText="MemberBindingItem: property=Value;IExpressionParameter: selector;fieldTypeSource=Enrollment.Domain.Entities.LookUpsModel">
                                            <genericArguments />
                                            <parameters>
                                              <literalParameter name="property">Value</literalParameter>
                                              <objectParameter name="selector">
                                                <constructor name="MemberSelectorOperatorParameters" visibleText="MemberSelectorOperatorParameters: memberFullName=Value;IExpressionParameter: sourceOperand">
                                                  <genericArguments />
                                                  <parameters>
                                                    <literalParameter name="memberFullName">Value</literalParameter>
                                                    <objectParameter name="sourceOperand">
                                                      <constructor name="ParameterOperatorParameters" visibleText="ParameterOperatorParameters: parameterName=s">
                                                        <genericArguments />
                                                        <parameters>
                                                          <literalParameter name="parameterName">s</literalParameter>
                                                        </parameters>
                                                      </constructor>
                                                    </objectParameter>
                                                  </parameters>
                                                </constructor>
                                              </objectParameter>
                                              <literalParameter name="fieldTypeSource">Enrollment.Domain.Entities.LookUpsModel</literalParameter>
                                            </parameters>
                                          </constructor>
                                        </object>
                                        <object>
                                          <constructor name="MemberBindingItem" visibleText="MemberBindingItem: property=Text;IExpressionParameter: selector;fieldTypeSource=Enrollment.Domain.Entities.LookUpsModel">
                                            <genericArguments />
                                            <parameters>
                                              <literalParameter name="property">Text</literalParameter>
                                              <objectParameter name="selector">
                                                <constructor name="MemberSelectorOperatorParameters" visibleText="MemberSelectorOperatorParameters: memberFullName=Text;IExpressionParameter: sourceOperand">
                                                  <genericArguments />
                                                  <parameters>
                                                    <literalParameter name="memberFullName">Text</literalParameter>
                                                    <objectParameter name="sourceOperand">
                                                      <constructor name="ParameterOperatorParameters" visibleText="ParameterOperatorParameters: parameterName=s">
                                                        <genericArguments />
                                                        <parameters>
                                                          <literalParameter name="parameterName">s</literalParameter>
                                                        </parameters>
                                                      </constructor>
                                                    </objectParameter>
                                                  </parameters>
                                                </constructor>
                                              </objectParameter>
                                              <literalParameter name="fieldTypeSource">Enrollment.Domain.Entities.LookUpsModel</literalParameter>
                                            </parameters>
                                          </constructor>
                                        </object>
                                      </objectList>
                                    </objectListParameter>
                                    <objectParameter name="newType">
                                      <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">
                                        <genericArguments />
                                        <parameters>
                                          <literalParameter name="assemblyQualifiedTypeName">Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</literalParameter>
                                        </parameters>
                                      </function>
                                    </objectParameter>
                                  </parameters>
                                </constructor>
                              </objectParameter>
                              <literalParameter name="selectorParameterName">s</literalParameter>
                            </parameters>
                          </constructor>
                        </objectParameter>
                        <objectParameter name="sourceElementType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.Linq.IQueryable`1[[Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">System.Linq.IQueryable`1[[Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                        <literalParameter name="parameterName">$it</literalParameter>
                        <objectParameter name="bodyType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.Linq.IQueryable`1[[Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">System.Linq.IQueryable`1[[Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                      </parameters>
                    </constructor>
                  </objectParameter>
                  <objectParameter name="requestDetails">
                    <constructor name="RequestDetailsParameters" visibleText="RequestDetailsParameters: Type: modelType;Type: dataType;Type: modelReturnType;Type: dataReturnType;dataSourceUrl=api/List/GetList">
                      <genericArguments />
                      <parameters>
                        <objectParameter name="modelType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                        <objectParameter name="dataType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=Enrollment.Data.Entities.LookUps, Enrollment.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">Enrollment.Data.Entities.LookUps, Enrollment.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                        <objectParameter name="modelReturnType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.Linq.IQueryable`1[[Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">System.Linq.IQueryable`1[[Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                        <objectParameter name="dataReturnType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.Linq.IQueryable`1[[Enrollment.Data.Entities.LookUps, Enrollment.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">System.Linq.IQueryable`1[[Enrollment.Data.Entities.LookUps, Enrollment.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                        <literalParameter name="dataSourceUrl">api/List/GetList</literalParameter>
                      </parameters>
                    </constructor>
                  </objectParameter>
                  <literalParameter name="reloadItemsFlowName">personalcountyselector</literalParameter>
                  <literalParameter name="fieldTypeSource">Enrollment.Domain.Entities.LookUpsModel</literalParameter>
                </parameters>
              </constructor>
            </objectParameter>
            <literalParameter name="fieldTypeSource">Enrollment.Domain.Entities.PersonalModel</literalParameter>
          </parameters>
        </constructor>
      </fragment>
      <fragment name="MultiSelectTemplateControl">
        <constructor name="MultiSelectFormControlSettingsParameters" visibleText="MultiSelectFormControlSettingsParameters: field=StatesLivedIn;title=States Lived In;placeholder=States Lived In (required);stringFormat={0};Type: type;MultiSelectTemplateParameters: multiSelectTemplate;FieldValidationSettingsParameters: validationSetting;fieldTypeSource=Enrollment.Domain.Entities.ResidencyModel;listElementTypeSource=Enrollment.Domain.Entities.StateLivedInModel">
          <genericArguments />
          <parameters>
            <literalParameter name="field">StatesLivedIn</literalParameter>
            <literalListParameter name="keyFields">
              <literalList literalType="String" listType="GenericList" visibleText="keyFields: Count(1)">
                <literal>State</literal>
              </literalList>
            </literalListParameter>
            <literalParameter name="title">States Lived In</literalParameter>
            <literalParameter name="placeholder">States Lived In (required)</literalParameter>
            <literalParameter name="stringFormat">{0}</literalParameter>
            <objectParameter name="type">
              <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.Collections.Generic.ICollection`1[[Enrollment.Domain.Entities.StateLivedInModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e">
                <genericArguments />
                <parameters>
                  <literalParameter name="assemblyQualifiedTypeName">System.Collections.Generic.ICollection`1[[Enrollment.Domain.Entities.StateLivedInModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e</literalParameter>
                </parameters>
              </function>
            </objectParameter>
            <objectParameter name="multiSelectTemplate">
              <constructor name="MultiSelectTemplateParameters" visibleText="MultiSelectTemplateParameters: templateName=MultiSelectTemplate;placeholderText=(States Lived In);textField=State;valueField=State;Type: modelType;loadingIndicatorText=Loading ...;SelectorLambdaOperatorParameters: textAndValueSelector;RequestDetailsParameters: requestDetails;fieldTypeSource=Enrollment.Domain.Entities.StateLivedInModel">
                <genericArguments />
                <parameters>
                  <literalParameter name="templateName">MultiSelectTemplate</literalParameter>
                  <literalParameter name="placeholderText">(States Lived In)</literalParameter>
                  <literalParameter name="textField">State</literalParameter>
                  <literalParameter name="valueField">State</literalParameter>
                  <objectParameter name="modelType">
                    <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=Enrollment.Domain.Entities.StateLivedInModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">
                      <genericArguments />
                      <parameters>
                        <literalParameter name="assemblyQualifiedTypeName">Enrollment.Domain.Entities.StateLivedInModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</literalParameter>
                      </parameters>
                    </function>
                  </objectParameter>
                  <literalParameter name="loadingIndicatorText">Loading ...</literalParameter>
                  <objectParameter name="textAndValueSelector">
                    <constructor name="SelectorLambdaOperatorParameters" visibleText="SelectorLambdaOperatorParameters: IExpressionParameter: selector;Type: sourceElementType;parameterName=$it;Type: bodyType">
                      <genericArguments />
                      <parameters>
                        <objectParameter name="selector">
                          <constructor name="SelectOperatorParameters" visibleText="SelectOperatorParameters: IExpressionParameter: sourceOperand;IExpressionParameter: selectorBody;selectorParameterName=s">
                            <genericArguments />
                            <parameters>
                              <objectParameter name="sourceOperand">
                                <constructor name="OrderByOperatorParameters" visibleText="OrderByOperatorParameters: IExpressionParameter: sourceOperand;IExpressionParameter: selectorBody;ListSortDirection: sortDirection;selectorParameterName=l">
                                  <genericArguments />
                                  <parameters>
                                    <objectParameter name="sourceOperand">
                                      <constructor name="WhereOperatorParameters" visibleText="WhereOperatorParameters: IExpressionParameter: sourceOperand;IExpressionParameter: filterBody;filterParameterName=l">
                                        <genericArguments />
                                        <parameters>
                                          <objectParameter name="sourceOperand">
                                            <constructor name="ParameterOperatorParameters" visibleText="ParameterOperatorParameters: parameterName=$it">
                                              <genericArguments />
                                              <parameters>
                                                <literalParameter name="parameterName">$it</literalParameter>
                                              </parameters>
                                            </constructor>
                                          </objectParameter>
                                          <objectParameter name="filterBody">
                                            <constructor name="EqualsBinaryOperatorParameters" visibleText="EqualsBinaryOperatorParameters: IExpressionParameter: left;IExpressionParameter: right">
                                              <genericArguments />
                                              <parameters>
                                                <objectParameter name="left">
                                                  <constructor name="MemberSelectorOperatorParameters" visibleText="MemberSelectorOperatorParameters: memberFullName=ListName;IExpressionParameter: sourceOperand">
                                                    <genericArguments />
                                                    <parameters>
                                                      <literalParameter name="memberFullName">ListName</literalParameter>
                                                      <objectParameter name="sourceOperand">
                                                        <constructor name="ParameterOperatorParameters" visibleText="ParameterOperatorParameters: parameterName=l">
                                                          <genericArguments />
                                                          <parameters>
                                                            <literalParameter name="parameterName">l</literalParameter>
                                                          </parameters>
                                                        </constructor>
                                                      </objectParameter>
                                                    </parameters>
                                                  </constructor>
                                                </objectParameter>
                                                <objectParameter name="right">
                                                  <constructor name="ConstantOperatorParameters" visibleText="ConstantOperatorParameters: Object: constantValue;Type: type">
                                                    <genericArguments />
                                                    <parameters>
                                                      <objectParameter name="constantValue">
                                                        <function name="Cast" visibleText="Cast: ">
                                                          <genericArguments>
                                                            <literalParameter genericArgumentName="From">
                                                              <literalType>String</literalType>
                                                              <control>SingleLineTextBox</control>
                                                              <useForEquality>true</useForEquality>
                                                              <useForHashCode>false</useForHashCode>
                                                              <useForToString>true</useForToString>
                                                              <propertySource />
                                                              <propertySourceParameter />
                                                              <defaultValue />
                                                              <domain />
                                                            </literalParameter>
                                                            <objectParameter genericArgumentName="To">
                                                              <objectType>System.Object</objectType>
                                                              <useForEquality>false</useForEquality>
                                                              <useForHashCode>false</useForHashCode>
                                                              <useForToString>true</useForToString>
                                                            </objectParameter>
                                                          </genericArguments>
                                                          <parameters>
                                                            <literalParameter name="From">states</literalParameter>
                                                          </parameters>
                                                        </function>
                                                      </objectParameter>
                                                      <objectParameter name="type">
                                                        <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.String">
                                                          <genericArguments />
                                                          <parameters>
                                                            <literalParameter name="assemblyQualifiedTypeName">System.String</literalParameter>
                                                          </parameters>
                                                        </function>
                                                      </objectParameter>
                                                    </parameters>
                                                  </constructor>
                                                </objectParameter>
                                              </parameters>
                                            </constructor>
                                          </objectParameter>
                                          <literalParameter name="filterParameterName">l</literalParameter>
                                        </parameters>
                                      </constructor>
                                    </objectParameter>
                                    <objectParameter name="selectorBody">
                                      <constructor name="MemberSelectorOperatorParameters" visibleText="MemberSelectorOperatorParameters: memberFullName=Text;IExpressionParameter: sourceOperand">
                                        <genericArguments />
                                        <parameters>
                                          <literalParameter name="memberFullName">Text</literalParameter>
                                          <objectParameter name="sourceOperand">
                                            <constructor name="ParameterOperatorParameters" visibleText="ParameterOperatorParameters: parameterName=l">
                                              <genericArguments />
                                              <parameters>
                                                <literalParameter name="parameterName">l</literalParameter>
                                              </parameters>
                                            </constructor>
                                          </objectParameter>
                                        </parameters>
                                      </constructor>
                                    </objectParameter>
                                    <objectParameter name="sortDirection">
                                      <variable name="ListSortDirection_Ascending" visibleText="ListSortDirection_Ascending" />
                                    </objectParameter>
                                    <literalParameter name="selectorParameterName">l</literalParameter>
                                  </parameters>
                                </constructor>
                              </objectParameter>
                              <objectParameter name="selectorBody">
                                <constructor name="MemberInitOperatorParameters" visibleText="MemberInitOperatorParameters: Type: newType">
                                  <genericArguments />
                                  <parameters>
                                    <objectListParameter name="memberBindings">
                                      <objectList objectType="Enrollment.Parameters.Expressions.MemberBindingItem" listType="GenericList" visibleText="memberBindings: Count(1)">
                                        <object>
                                          <constructor name="MemberBindingItem" visibleText="MemberBindingItem: property=State;IExpressionParameter: selector;fieldTypeSource=Enrollment.Domain.Entities.StateLivedInModel">
                                            <genericArguments />
                                            <parameters>
                                              <literalParameter name="property">State</literalParameter>
                                              <objectParameter name="selector">
                                                <constructor name="MemberSelectorOperatorParameters" visibleText="MemberSelectorOperatorParameters: memberFullName=Value;IExpressionParameter: sourceOperand">
                                                  <genericArguments />
                                                  <parameters>
                                                    <literalParameter name="memberFullName">Value</literalParameter>
                                                    <objectParameter name="sourceOperand">
                                                      <constructor name="ParameterOperatorParameters" visibleText="ParameterOperatorParameters: parameterName=s">
                                                        <genericArguments />
                                                        <parameters>
                                                          <literalParameter name="parameterName">s</literalParameter>
                                                        </parameters>
                                                      </constructor>
                                                    </objectParameter>
                                                  </parameters>
                                                </constructor>
                                              </objectParameter>
                                              <literalParameter name="fieldTypeSource">Enrollment.Domain.Entities.StateLivedInModel</literalParameter>
                                            </parameters>
                                          </constructor>
                                        </object>
                                      </objectList>
                                    </objectListParameter>
                                    <objectParameter name="newType">
                                      <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=Enrollment.Domain.Entities.StateLivedInModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">
                                        <genericArguments />
                                        <parameters>
                                          <literalParameter name="assemblyQualifiedTypeName">Enrollment.Domain.Entities.StateLivedInModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</literalParameter>
                                        </parameters>
                                      </function>
                                    </objectParameter>
                                  </parameters>
                                </constructor>
                              </objectParameter>
                              <literalParameter name="selectorParameterName">s</literalParameter>
                            </parameters>
                          </constructor>
                        </objectParameter>
                        <objectParameter name="sourceElementType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.Linq.IQueryable`1[[Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">System.Linq.IQueryable`1[[Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                        <literalParameter name="parameterName">$it</literalParameter>
                        <objectParameter name="bodyType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.Linq.IQueryable`1[[Enrollment.Domain.Entities.StateLivedInModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">System.Linq.IQueryable`1[[Enrollment.Domain.Entities.StateLivedInModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                      </parameters>
                    </constructor>
                  </objectParameter>
                  <objectParameter name="requestDetails">
                    <constructor name="RequestDetailsParameters" visibleText="RequestDetailsParameters: Type: modelType;Type: dataType;Type: modelReturnType;Type: dataReturnType;dataSourceUrl=api/List/GetList">
                      <genericArguments />
                      <parameters>
                        <objectParameter name="modelType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">Enrollment.Domain.Entities.LookUpsModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                        <objectParameter name="dataType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=Enrollment.Data.Entities.LookUps, Enrollment.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">Enrollment.Data.Entities.LookUps, Enrollment.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                        <objectParameter name="modelReturnType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.Linq.IQueryable`1[[Enrollment.Domain.Entities.StateLivedInModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">System.Linq.IQueryable`1[[Enrollment.Domain.Entities.StateLivedInModel, Enrollment.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                        <objectParameter name="dataReturnType">
                          <function name="Get Type" visibleText="Get Type: assemblyQualifiedTypeName=System.Linq.IQueryable`1[[Enrollment.Data.Entities.StateLivedIn, Enrollment.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
                            <genericArguments />
                            <parameters>
                              <literalParameter name="assemblyQualifiedTypeName">System.Linq.IQueryable`1[[Enrollment.Data.Entities.StateLivedIn, Enrollment.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</literalParameter>
                            </parameters>
                          </function>
                        </objectParameter>
                        <literalParameter name="dataSourceUrl">api/List/GetList</literalParameter>
                      </parameters>
                    </constructor>
                  </objectParameter>
                  <literalParameter name="fieldTypeSource">Enrollment.Domain.Entities.StateLivedInModel</literalParameter>
                </parameters>
              </constructor>
            </objectParameter>
            <objectParameter name="validationSetting">
              <constructor name="FieldValidationSettingsParameters" visibleText="FieldValidationSettingsParameters: ">
                <genericArguments />
                <parameters>
                  <objectListParameter name="validators">
                    <objectList objectType="Enrollment.Forms.Parameters.Validation.ValidatorDefinitionParameters" listType="GenericList" visibleText="validators: Count(1)">
                      <object>
                        <constructor name="ValidatorDefinitionParameters" visibleText="ValidatorDefinitionParameters: className=AtLeastOneRequiredRule;functionName=Check">
                          <genericArguments />
                          <parameters>
                            <literalParameter name="className">AtLeastOneRequiredRule</literalParameter>
                            <literalParameter name="functionName">Check</literalParameter>
                          </parameters>
                        </constructor>
                      </object>
                    </objectList>
                  </objectListParameter>
                </parameters>
              </constructor>
            </objectParameter>
            <literalParameter name="fieldTypeSource">Enrollment.Domain.Entities.ResidencyModel</literalParameter>
            <literalParameter name="listElementTypeSource">Enrollment.Domain.Entities.StateLivedInModel</literalParameter>
          </parameters>
        </constructor>
      </fragment>
    </folder>
  </folder>
</folder>
