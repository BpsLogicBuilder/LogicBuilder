<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="actionCellDialogFunctionsInvalid" xml:space="preserve">
    <value>Dialog Functions are invalid for Action Cell.</value>
  </data>
	<data name="actionIncomingConnectorCount" xml:space="preserve">
    <value>Action Shape requires at least one incoming connector.</value>
  </data>
	<data name="actionShapeOneBlankConnector" xml:space="preserve">
    <value>Action Shape requires exactly one outgoing  blank connector.</value>
  </data>
	<data name="actionShapeDataRequired" xml:space="preserve">
    <value>Action Shape requires data.</value>
  </data>
	<data name="allActionConnectorsSameStencil" xml:space="preserve">
    <value>All connectors attached to an Action Shape must belong to the same stencil. i.e. they must all be regular connectors or they must all be application specific.</value>
  </data>
	<data name="allConnectorsSameStencil" xml:space="preserve">
    <value>All connectors attached to a Module Shape must belong the same stencil. i.e. they must all be regular connectors or they must all be application specific.</value>
  </data>
	<data name="allWaitConditionsConnectorsSameStencil" xml:space="preserve">
    <value>All connectors attached to a Wait Conditions Shape must belong to the same stencil. i.e. they must all be regular connectors or they must all be application specific.</value>
  </data>
	<data name="allWaitDecisionsConnectorsSameStencil" xml:space="preserve">
    <value>All connectors attached to a Wait Decisions Shape must belong to the same stencil. i.e. they must all be regular connectors or they must all be application specific.</value>
  </data>
	<data name="applicationConnectorMismatch" xml:space="preserve">
    <value>For each incoming connector a corresponding outgoing connector is required and vice versa.</value>
  </data>
	<data name="applicationNameLogicBuilder" xml:space="preserve">
    <value>BPS Logic Builder</value>
  </data>
	<data name="applicationNameFormat" xml:space="preserve">
    <value>App{0}</value>
    <comment>0=Count</comment>
  </data>
	<data name="applicationNotConfigured" xml:space="preserve">
    <value>To use an application connector, the corresponding application must be configured. Select Project/Project Properties and the Applications tab to add applications.</value>
  </data>
	<data name="applicationUnaccountedForFormat" xml:space="preserve">
    <value>Application {0} has not been excluded for module {1} and is not accounted for. To configure excluded modules, select Project/Project Properties. In the Applications tab, select the relevant application.  Click on the button in the excluded modules text box.</value>
    <comment>0=ApplicationName 1=ModuleName</comment>
  </data>
	<data name="arrayKeyIndexIsInvalid" xml:space="preserve">
    <value>Given the variable category, each index in Member Name must be an integer greater than or equal to zero.</value>
  </data>
	<data name="assemblyUnavailableMessageFormat" xml:space="preserve">
    <value>The assembly "{0}", one of its dependencies or the class "{1}" could not be loaded.</value>
    <comment>0=assemblyFullPath; 1=FullyQulifiedClassName</comment>
  </data>
	<data name="beginFlowShapeRequired" xml:space="preserve">
    <value>Document: {0} - "Begin Flow Shape" or "Module Begin Shape" is required.</value>
    <comment>0=FileName</comment>
  </data>
	<data name="beginShapeCount" xml:space="preserve">
    <value>Document: {0} - Only one Begin Shape is allowed per module.</value>
    <comment>0=FileName</comment>
  </data>
	<data name="beginShapeIncoming" xml:space="preserve">
    <value>Incoming Connectors cannot be joined to Begin Flow or Module Begin Shapes.</value>
  </data>
	<data name="beginShapeOutgoingRequired" xml:space="preserve">
    <value>Begin Flow and Module Begin Shapes require only one blank outgoing connector.</value>
  </data>
	<data name="binaryFunctionParametersFormat" xml:space="preserve">
    <value>{0} {1} {2}</value>
    <comment>0=firstParameter; 1=operator; 2=secondParameter</comment>
  </data>
	<data name="binaryFunctionSeparatorFormat" xml:space="preserve">
    <value> {0} </value>
    <comment>0=functionName;</comment>
  </data>
	<data name="binaryOperatorCodeNameInvalidFormat" xml:space="preserve">
    <value>Invalid Member Name "{0}" for Binary Operator "{1}". Valid code names are: {2}.</value>
    <comment>0=Member Name; 1=Function; 2=List of valid names</comment>
  </data>
	<data name="blankConnectorExitingDialogMustEndFlow" xml:space="preserve">
    <value>A blank connector leaving a Dialog Shape must point to an End Flow Shape.</value>
  </data>
	<data name="buildSuccessful" xml:space="preserve">
    <value>Build Successful!</value>
  </data>
	<data name="builtInFunctionNameAnd" xml:space="preserve">
    <value>And</value>
  </data>
	<data name="builtInFunctionNameChainingUpdate" xml:space="preserve">
    <value>ChainingUpdate</value>
  </data>
	<data name="builtInFunctionNameEquals" xml:space="preserve">
    <value>Equals</value>
  </data>
	<data name="builtInFunctionNameGreaterThan" xml:space="preserve">
    <value>Greater Than</value>
  </data>
	<data name="builtInFunctionNameGreaterThanOrEquals" xml:space="preserve">
    <value>Greater Than or Equals</value>
  </data>
	<data name="builtInFunctionNameLessThan" xml:space="preserve">
    <value>Less Than</value>
  </data>
	<data name="builtInFunctionNameLessThanOrEquals" xml:space="preserve">
    <value>Less Than or Equals</value>
  </data>
	<data name="builtInFunctionNameNot" xml:space="preserve">
    <value>Not</value>
  </data>
	<data name="builtInFunctionNameRemoveDecision" xml:space="preserve">
    <value>Set To Null</value>
  </data>
	<data name="builtInFunctionNameSetDecision" xml:space="preserve">
    <value>Set Variable</value>
  </data>
	<data name="builtInFunctionNameOr" xml:space="preserve">
    <value>Or</value>
  </data>
	<data name="builtInFunctionsRootFolderText" xml:space="preserve">
    <value>Built In Functions</value>
  </data>
	<data name="builtInParameterNameMessage" xml:space="preserve">
    <value>message</value>
  </data>
	<data name="builtInParameterNameValue" xml:space="preserve">
    <value>value</value>
  </data>
	<data name="builtInParameterNameValue1" xml:space="preserve">
    <value>value1</value>
  </data>
	<data name="builtInParameterNameValue2" xml:space="preserve">
    <value>value2</value>
  </data>
	<data name="builtInParameterNameVariable" xml:space="preserve">
    <value>Variable</value>
  </data>
	<data name="cannotEvaluateVariableFormat" xml:space="preserve">
    <value>Type cannot be evaluated. Variable "{0}" is not configured.</value>
    <comment>0=VariableName</comment>
  </data>
	<data name="cannotLoadAssemblyFormat" xml:space="preserve">
    <value>Assembly "{0}" could not be loaded.</value>
    <comment>0=Assembly</comment>
  </data>
	<data name="cannotLoadCastAsVariableTypeFormat" xml:space="preserve">
    <value>Cannot load "Cast Variable As" type "{0}" for the variable "{1}".</value>
    <comment>0=castAsTypeName; 1=variableName;</comment>
  </data>
	<data name="cannotLoadClassFormat" xml:space="preserve">
    <value>Class "{0}" could not be loaded.</value>
    <comment>0=ActivityClass</comment>
  </data>
	<data name="cannotLoadFieldSourceFormat2" xml:space="preserve">
    <value>Cannot load the required {0} "{1}". {0} is required when {2} is "{3}".</value>
    <comment>0=lblPropertySourceText; 1=TypeFullName;2=lblliteralcontrolText; 3=ProperyInputText</comment>
  </data>
	<data name="cannotLoadPropertySourceParameterFormat" xml:space="preserve">
    <value>Cannot find the required property sourced parameter "{0}" for the parameter "{1}" in constructor "{2}". The property sourced parameter must be one of the sibling parameters {3} when the control is {4}.</value>
    <comment>0=sourceParameter; 1=parameter; 2=constructor;3=SiblingParameterList; 4=ParameterSourcedProperyInputText</comment>
  </data>
	<data name="cannotLoadPropertySourceParameterFormat2" xml:space="preserve">
    <value>Cannot find the required {0} "{1}". {0} must be one of the sibling parameters "{2}" when {3} is "{4}".</value>
    <comment>0=lblPropertySourceParameterText; 1=parametername;2=SiblingParameterList;3=lblliteralcontrolText;4=ProperyInputText</comment>
  </data>
	<data name="cannotLoadPropertySourceParameterFormat3" xml:space="preserve">
    <value>Cannot find the required {0} "{1}". {0} must be one of the member parameters "{2}" when {3} is "{4}".</value>
    <comment>0=lblPropertySourceParameterText; 1=parametername;2=MemberParameterList;3=lblliteralcontrolText;4=ProperyInputText</comment>
  </data>
	<data name="cannotLoadTypeForConstructorFormat" xml:space="preserve">
    <value>Type "{0}" could not be loaded for the constructor "{1}".</value>
    <comment>0=typeName;1=constructorName</comment>
  </data>
	<data name="cannotLoadTypeForFunctionFormat" xml:space="preserve">
    <value>The return type "{0}" could not be loaded for the function "{1}".</value>
    <comment>0=typeName;1=functionName</comment>
  </data>
	<data name="cannotLoadTypeForGenericArgument" xml:space="preserve">
    <value>Cannot load the type for the generic argument "{0}".</value>
    <comment>0=generic argument name;</comment>
  </data>
	<data name="cannotLoadTypeForGenericArgumentForConstructorFormat" xml:space="preserve">
    <value>Cannot load the type for the generic argument "{0}". Constructor name: {1}.</value>
    <comment>0=generic argument name;1=constructor name</comment>
  </data>
	<data name="cannotLoadTypeForGenericArgumentForFunctionFormat" xml:space="preserve">
    <value>Cannot load the type for the generic argument "{0}". Function name: {1}.</value>
    <comment>0=generic argument name;1=function name</comment>
  </data>
	<data name="cannotLoadTypeFormat2" xml:space="preserve">
    <value>Cannot load the type "{0}".</value>
    <comment>0=typeName;</comment>
  </data>
	<data name="cannotLoadTypeForVariableFormat" xml:space="preserve">
    <value>The variable type "{0}" could not be loaded for the variable "{1}".</value>
    <comment>0=typeName;1=variableName</comment>
  </data>
	<data name="cannotSetValueTypedVariableToNullFormat" xml:space="preserve">
    <value>The variable "{0}" is a non-nullable value type and cannot be set to null.</value>
    <comment>0=VariableName</comment>
  </data>
	<data name="cannotValidateRuleSetFormat" xml:space="preserve">
    <value>RuleSet "{0}" could not be validated.</value>
  </data>
	<data name="castReferenceAsMustBeEmptyFormat" xml:space="preserve">
    <value>Cast Reference As field for variable {0} must be empty when the reference category is "This" or reference category is "Type".</value>
    <comment>0=VariableName</comment>
  </data>
	<data name="cellDataRequired" xml:space="preserve">
    <value>Cell requires data.</value>
  </data>
	<data name="chainingUpdateValidationError" xml:space="preserve">
    <value>The field or property to be updated must be represented by a string and cannot include functions or variables.</value>
  </data>
	<data name="checkedOptionalParameterIsEmptyFormat" xml:space="preserve">
    <value>the checked optional parameter "{0}" is empty. Unckeck the check box to leave an optional parameter unpopulated.</value>
    <comment>0=parameterName</comment>
  </data>
	<data name="closeFileWarningFormat" xml:space="preserve">
    <value>Please close {0} before proceeding.</value>
    <comment>0=FileName</comment>
  </data>
	<data name="closeFolderFilesWarningFormat" xml:space="preserve">
    <value>Please close all files in {0} before proceeding.</value>
    <comment>0=FolderName</comment>
  </data>
	<data name="collectionIndicatorText" xml:space="preserve">
    <value>(Collection)</value>
  </data>
	<data name="columnIndexIsInvalidFormat" xml:space="preserve">
    <value>Column Index {0} is invalid.</value>
    <comment>0=column index as seen by the user</comment>
  </data>
	<data name="commentShapeCannotHaveConnectors" xml:space="preserve">
    <value>Comment shapes may not be attached to connectors.</value>
  </data>
	<data name="conditionBoxIncomingRequired" xml:space="preserve">
    <value>Condition Shape requires at least one incoming connector.</value>
  </data>
	<data name="conditionBoxOutgoingRequired" xml:space="preserve">
    <value>Condition Shape requires one "YES" outgoing connector and one outgoing "NO" connector.</value>
  </data>
	<data name="conditionShapeDataRequired" xml:space="preserve">
    <value>Conditions Shape requires data.</value>
  </data>
	<data name="configurationDataFile" xml:space="preserve">
    <value>Config Data</value>
  </data>
	<data name="configurationFormIndicatorText" xml:space="preserve">
    <value>(Form)</value>
  </data>
	<data name="connectorCategoryUndefinedFormat" xml:space="preserve">
    <value>The connector category {0} is undefined.</value>
    <comment>0=connector category</comment>
  </data>
	<data name="connectorRequires2Shapes" xml:space="preserve">
    <value>Connector must be connected to 2 shapes.</value>
  </data>
	<data name="constrConfigCommentsHelp" xml:space="preserve">
    <value>Comments describing the argument.</value>
  </data>
	<data name="constrConfigConstructorNameHelp1" xml:space="preserve">
    <value>Unique name for the constructor.</value>
  </data>
	<data name="constrConfigConstructorTypeNameHelp" xml:space="preserve">
    <value>Fully qualified type name of the constructor's class.</value>
  </data>
	<data name="constrConfigControlHelp" xml:space="preserve">
    <value>Specify the control used for updating the argument in the flow diagram shape.</value>
  </data>
	<data name="constrConfigDefaultValueHelp" xml:space="preserve">
    <value>Specify a default value for the argument.</value>
  </data>
	<data name="constrConfigDomainHelp" xml:space="preserve">
    <value>The domain can be used to limit the possible values for this argument to a restricted list.</value>
  </data>
	<data name="constrConfigElementControlHelp" xml:space="preserve">
    <value>Specify the control used for updating a list element in the flow diagram shape.</value>
  </data>
	<data name="constrConfigFolderNameHelp" xml:space="preserve">
    <value>Unique name for the folder.</value>
  </data>
	<data name="constrConfigGenericArgumentNameHelp" xml:space="preserve">
    <value>The name of the generic argument used by this parameter.</value>
  </data>
	<data name="constrConfigGenericArgumentsHelp" xml:space="preserve">
    <value>Form for modifying generic arguments.</value>
  </data>
	<data name="constrConfigListLiteralTypeHelp" xml:space="preserve">
    <value>The array's element type or the underlying generic type of the list or collection.</value>
  </data>
	<data name="constrConfigListObjectTypeHelp" xml:space="preserve">
    <value>The Type.FullName property of the array element or the underlying type of the list or collection.</value>
  </data>
	<data name="constrConfigListTypeHelp" xml:space="preserve">
    <value>Specify whether the list is an array, a generic list or a generic collection.</value>
  </data>
	<data name="constrConfigLiteralTypeHelp" xml:space="preserve">
    <value>The argument's type.</value>
  </data>
	<data name="constrConfigObjectTypeHelp" xml:space="preserve">
    <value>Type.FullName property for the object.</value>
  </data>
	<data name="constrConfigOptionalHelp" xml:space="preserve">
    <value>Specify whether or not the argument is optional.</value>
  </data>
	<data name="constrConfigParameterNameHelp" xml:space="preserve">
    <value>The name for this constructor argument.</value>
  </data>
	<data name="constrConfigPropertySourceHelpFormat" xml:space="preserve">
    <value>Specify the fully qualified class as a source for a public properties domain when the {0} is "{1}".</value>
    <comment>0=control label for input type;1=string describing LiteralInputStyle.PropertyInput</comment>
  </data>
	<data name="constrConfigPropertySourceParameterHelpFormat" xml:space="preserve">
    <value>Specify the parameter whose value will return the  fully qualified class as a source for a public properties domain when the {0} is "{1}".</value>
    <comment>0=control label for input type;1=string describing LiteralInputStyle.ParameterSourcedPropertyInput</comment>
  </data>
	<data name="constrConfigSummaryHelp" xml:space="preserve">
    <value>Comments describing the constructor.</value>
  </data>
	<data name="constrConfigUseForEqualityHelp" xml:space="preserve">
    <value>Indicate whether or not this argument should be used calculate equality with another instance of this constructor.</value>
  </data>
	<data name="constrConfigUseForHashCodeHelp" xml:space="preserve">
    <value>Indicate whether or not this argument should be used help determine the constructor's hash code.</value>
  </data>
	<data name="constrConfigUseForToStringHelp" xml:space="preserve">
    <value>Indicate whether or not this argument should be used to provide a string representation of the constructor.</value>
  </data>
	<data name="constrGenericArgNameInvalidFormat" xml:space="preserve">
    <value>The generic argument name "{0}" for constructor "{1}" is invalid.  Generic argument names must start with an alpha character or underscore and can contain only alphanumeric characters and underscores.</value>
    <comment>0=genericArgumentName;1=parameterName;2=constructorName</comment>
  </data>
	<data name="constructorCannotLoadTypeForParameterFormat" xml:space="preserve">
    <value>Cannot load the type {0} for the parameter {1}. Please update the constructor configuration for {2}.</value>
    <comment>0=typeFullName;1=parameterName;2=constructorName</comment>
  </data>
	<data name="constructorExistsFormat" xml:space="preserve">
    <value>A constructor "{0}" already exists - {1}({2}) with the same signature.</value>
    <comment>0=constructorName 1=Type 2=parametersToString</comment>
  </data>
	<data name="constructorGenericArgsMisMatchFormat" xml:space="preserve">
    <value>The configured constructor's generic arguments "{0}" must match the data's generic arguments "{1}".</value>
    <comment>0=constructor's generic arguments;1= data's generic arguments</comment>
  </data>
	<data name="constructorGenericArgsMisMatchFormat2" xml:space="preserve">
    <value>The configured constructor's type name  "{0}" must be a generic type definition matching the generic arguments "{1}".</value>
    <comment>0=constructor's type name;1= data's generic arguments</comment>
  </data>
	<data name="constructorNodeDescription" xml:space="preserve">
    <value>Constructor</value>
  </data>
	<data name="constructorNotAssignableFormat" xml:space="preserve">
    <value>The constructor "{0}" must be assignable to "{1}".</value>
    <comment>0=constructorName;1=objectType</comment>
  </data>
	<data name="constructorNotConfiguredFormat" xml:space="preserve">
    <value>Constructor "{0}" is not configured.</value>
    <comment>0=constructorName</comment>
  </data>
	<data name="constructorNotConfiguredForObjectTypeFormat" xml:space="preserve">
    <value>There is no constructor configured for the object type "{0}".</value>
    <comment>0=typeName</comment>
  </data>
	<data name="constructorNotConfiguredForObjectTypeFormat2" xml:space="preserve">
    <value>The constructor "{0}" cannot be assigned to the object type "{1}".</value>
    <comment>0=constructorName;1=typeName</comment>
  </data>
	<data name="constructorsRootFolderText" xml:space="preserve">
    <value>Constructors</value>
  </data>
  <data name="constructorToStringFormat" xml:space="preserve">
    <value>{0} - {1}({2})</value>
    <comment>0=constructorName 1=Type 2=parametersToString</comment>
  </data>
	<data name="constructorVisibleTextBegin" xml:space="preserve">
    <value>&#x255F;</value>
    <comment>Must be a string with length==1 i.e. character e.g. HHH(Table: value=phone;key=MM;field=DD)</comment>
  </data>
	<data name="constructorVisibleTextEnd" xml:space="preserve">
    <value>&#x2562;</value>
    <comment>Must be a string with length==1 i.e. character</comment>
  </data>
	<data name="createNewConstructorsFileQuestion" xml:space="preserve">
    <value>Create a new Constructors File?</value>
  </data>
	<data name="createNewFragmentsFileQuestion" xml:space="preserve">
    <value>Create a new Fragments File?</value>
  </data>
	<data name="createNewFunctionsFileQuestion" xml:space="preserve">
    <value>Create a new Functions File?</value>
  </data>
	<data name="createNewProjectFileQuestion" xml:space="preserve">
    <value>Create a new Project File?</value>
  </data>
	<data name="createNewVariablesFileQuestion" xml:space="preserve">
    <value>Create a new Variables File?</value>
  </data>
	<data name="customPropertyNotFoundFormat" xml:space="preserve">
    <value>Property {0} does not exist.</value>
		<comment>0=propertyName (prefix cellname)</comment>
  </data>
	<data name="decisionBoxIncomingRequired" xml:space="preserve">
    <value>Decision Shape requires at least one incoming connector.</value>
  </data>
	<data name="decisionBoxOutgoingRequired" xml:space="preserve">
    <value>Decision Shape requires one outgoing "YES" connector and one outgoing "NO" connector.</value>
  </data>
	<data name="decisionConnectorNoText" xml:space="preserve">
    <value>NO</value>
  </data>
	<data name="decisionConnectorYesText" xml:space="preserve">
    <value>YES</value>
  </data>
	<data name="decisionNotConfiguredFormat2" xml:space="preserve">
    <value>Variable "{0}" is not configured.</value>
    <comment>0=VariableName</comment>
  </data>
	<data name="decisionShapeDataRequired" xml:space="preserve">
    <value>Decision Shape requires data.</value>
  </data>
	<data name="defaultActivityAssemblyFolder" xml:space="preserve">
    <value>ActivityAssembly</value>
  </data>
	<data name="defaultActivityClass" xml:space="preserve">
    <value>ActivityNamespace.ActivityClass</value>
  </data>
	<data name="defaultDeleteRulesUrl" xml:space="preserve">
    <value>http://localhost:3677/api/transfer/DeleteRules</value>
  </data>
	<data name="defaultDeleteAllRulesUrl" xml:space="preserve">
    <value>http://localhost:3677/api/transfer/DeleteAllRules</value>
  </data>
  <data name="defaultErrorMessage" xml:space="preserve">
    <value>An error has occurred</value>
  </data>
	<data name="defaultNewFolderName" xml:space="preserve">
    <value>NewFolder</value>
  </data>
	<data name="defaultNewFragmentName" xml:space="preserve">
    <value>NewFragment</value>
  </data>
	<data name="defaultNewFunctionName" xml:space="preserve">
    <value>NewFunction</value>
  </data>
	<data name="defaultNewParameterName" xml:space="preserve">
    <value>newParameter</value>
  </data>
	<data name="defaultNewVariableName" xml:space="preserve">
    <value>NewVariable</value>
  </data>
	<data name="defaultPostFileDataUrl" xml:space="preserve">
    <value>http://localhost:3677/api/transfer/PostFileData</value>
  </data>
	<data name="defaultPostVariableMetaDataUrl" xml:space="preserve">
    <value>http://localhost:3677/api/transfer/PostVariableMetaData</value>
  </data>
	<data name="defaultResourcesFile" xml:space="preserve">
    <value>strings.resources</value>
  </data>
	<data name="defaultResourcesFolder" xml:space="preserve">
    <value>Resources</value>
  </data>
	<data name="defaultRulesFile" xml:space="preserve">
    <value>expert.rules</value>
  </data>
	<data name="defaultRulesFolder" xml:space="preserve">
    <value>Rules</value>
  </data>
	<data name="deleteAllRulesQuestion" xml:space="preserve">
    <value>Delete All Rules?</value>
  </data>
	<data name="deleteConstructorQuestionFormat" xml:space="preserve">
    <value>Delete the constructor: {0}?</value>
    <comment>0=ConstructorName</comment>
  </data>
	<data name="deleteFileQuestionFormat" xml:space="preserve">
    <value>Delete the file: {0}?</value>
    <comment>0=FileName</comment>
  </data>
	<data name="deleteFolderQuestion" xml:space="preserve">
    <value>Delete the folder: {0}?</value>
    <comment>0=Foldername</comment>
  </data>
	<data name="deleteParameterQuestionFormat" xml:space="preserve">
    <value>Delete the parameter: {0}?</value>
    <comment>0=ParameterName</comment>
  </data>
	<data name="deleteProjectQuestionFormat" xml:space="preserve">
    <value>Delete the project: {0}?</value>
    <comment>0=ProjectName</comment>
  </data>
	<data name="deleteSelectedItems" xml:space="preserve">
    <value>Delete the selected items?</value>
  </data>
	<data name="deleteVariableQuestionFormat" xml:space="preserve">
    <value>Delete the variable: {0}?</value>
    <comment>0=VariableName</comment>
  </data>
	<data name="deletingRulesFormat" xml:space="preserve">
    <value>Deleting {0} Rules</value>
    <comment>0=Application Nickname</comment>
  </data>
	<data name="deployingRulesFormat" xml:space="preserve">
    <value>Deploying {0} Rules</value>
    <comment>0=Application Nickname</comment>
  </data>
	<data name="deploymentComplete" xml:space="preserve">
    <value>Deployment Complete!</value>
  </data>
	<data name="diagramVisibleLinkFormat" xml:space="preserve">
    <value>Document: {0}, Page: {1}, Master: {2}, Shape Index: {3}.</value>
    <comment>0=fileName; 1=PageNumber; 2=Master; 3=ShapeIndex</comment>
  </data>
	<data name="dialogBoxOutgoingCount" xml:space="preserve">
    <value>Without a multiple choice dialog function or diverging application logic, only one connector can exit a Dialog Shape.</value>
  </data>
	<data name="dialogConnectorFormat" xml:space="preserve">
    <value>{0}:{1}</value>
    <comment>Must include {0} and {1} for index and text respectively</comment>
  </data>
	<data name="dialogDuplicateChoiceFormat" xml:space="preserve">
    <value>Shape has two connectors with identical choices.  Connector number {0} is a duplicate.</value>
    <comment>0=Duplicate Connector Number</comment>
  </data>
	<data name="dialogFormMessageControlErrorsGroupBoxHeader" xml:space="preserve">
    <value>Errors</value>
  </data>
	<data name="dialogFormMessageControlMessagesGroupBoxHeader" xml:space="preserve">
    <value>Messages</value>
  </data>
	<data name="dialogFunctionsInvalid" xml:space="preserve">
    <value>Dialog Functions are invalid for Action Shape.</value>
  </data>
	<data name="dialogFunctionsInvalidConnector" xml:space="preserve">
    <value>Dialog Functions are invalid for Connectors.</value>
  </data>
	<data name="dialogInvalidConnectorsFormat" xml:space="preserve">
    <value>Shape with multiple connectors has {0} invalid connector(s).</value>
    <comment>0=#OfInvalidConnectors</comment>
  </data>
	<data name="dialogOrQuestionsOutgoingCount" xml:space="preserve">
    <value>Either one connector which is blank, one connector which is not blank or multiple connectors all of which are not blank can exit a Dialog shape.</value>
  </data>
	<data name="dialogShapeDataRequired" xml:space="preserve">
    <value>Dialog Shape Requires data.</value>
  </data>
	<data name="dialogShapeOnlyOneFunction" xml:space="preserve">
    <value>Only one function allowed per Dialog Shape.</value>
  </data>
	<data name="dialogShapeRequiresIncoming" xml:space="preserve">
    <value>Dialog Shape requires at least one incoming connector.</value>
  </data>
	<data name="dialogShapesOneDialogFunction" xml:space="preserve">
    <value>Dialog Shape requires exactly one dialog function.</value>
  </data>
	<data name="displayMemuItemWithEllipsisFormat" xml:space="preserve">
    <value>{0}...</value>
    <comment>0=MenuItem Text</comment>
  </data>
	<data name="domainCharacterPrompt" xml:space="preserve">
    <value>Enter the characters in the domain (one per line):</value>
  </data>
	<data name="domainNumberPrompt" xml:space="preserve">
    <value>Enter the numbers in the domain (one per line):</value>
  </data>
	<data name="domainStringPrompt" xml:space="preserve">
    <value>Enter the strings in the domain (one per line):</value>
  </data>
	<data name="domainValuePrompt" xml:space="preserve">
    <value>Enter the values in the domain (one per line):</value>
  </data>
	<data name="dotExe" xml:space="preserve">
    <value>.exe</value>
  </data>
	<data name="dropdownTextParameterSourcedPropertyInput" xml:space="preserve">
    <value>Parameter Sourced Property Input</value>
  </data>
	<data name="dropdownTextPropertyInput" xml:space="preserve">
    <value>Property Input</value>
  </data>
	<data name="duplicateIncomingConnector" xml:space="preserve">
    <value>Only one incoming connector per application is valid.</value>
  </data>
	<data name="duplicateOutgoingConnector" xml:space="preserve">
    <value>Only one outgoing connector per application is valid.</value>
  </data>
	<data name="editConstructorGroupBoxHeaderText" xml:space="preserve">
    <value>Constructor</value>
  </data>
	<data name="editFunctionGroupBoxHeaderText" xml:space="preserve">
    <value>Function</value>
  </data>
	<data name="emptyStringVisibleText" xml:space="preserve">
    <value>Empty String</value>
  </data>
	<data name="endShapeIncoming" xml:space="preserve">
    <value>End Flow, Module End and Terminate Shapes require at least one incoming connector.</value>
  </data>
	<data name="endShapeOutgoing" xml:space="preserve">
    <value>Outgoing Connectors cannot be joined to End Flow, Module End or Terminate Shapes.</value>
  </data>
	<data name="equalSign" xml:space="preserve">
    <value>=</value>
  </data>
	<data name="fileAlreadyExistsFormat" xml:space="preserve">
    <value>File {0} already Exists.</value>
    <comment>0=fileFullName</comment>
  </data>
	<data name="fileDeleted" xml:space="preserve">
    <value>{0} deleted.</value>
    <comment>0=functionName</comment>
  </data>
	<data name="fileDeployed" xml:space="preserve">
    <value>{0} deployed.</value>
    <comment>0=functionName</comment>
  </data>
	<data name="fileExistsExceptionMessage" xml:space="preserve">
    <value>File Name already exists at: {0}.</value>
    <comment>0=FullPath</comment>
  </data>
	<data name="fileNotFoundFormat" xml:space="preserve">
    <value>File "{0}" not found.</value>
    <comment>0=fileName or FileFullName</comment>
  </data>
	<data name="fileNotWriteableFormat" xml:space="preserve">
    <value>"{0}" is not writeable.  Make the file writeable?  Choose "Yes" to make writeable, "No" to open for read only and Cancel to quit?</value>
    <comment>0=fileName</comment>
  </data>
	<data name="findConstructorFormText" xml:space="preserve">
    <value>Find Constructor</value>
  </data>
	<data name="findConstructorInFilesFormText" xml:space="preserve">
    <value>Find Constructor in Files</value>
  </data>
	<data name="findFunctionFormText" xml:space="preserve">
    <value>Find Function</value>
  </data>
	<data name="findFunctionInFilesFormText" xml:space="preserve">
    <value>Find Function in Files</value>
  </data>
	<data name="findTextFormText" xml:space="preserve">
    <value>Find Text</value>
  </data>
	<data name="findTextInFilesFormText" xml:space="preserve">
    <value>Find Text in Files</value>
  </data>
	<data name="findVariableFormText" xml:space="preserve">
    <value>Find Variable</value>
  </data>
	<data name="findVariableInFilesFormText" xml:space="preserve">
    <value>Find Variable in Files</value>
  </data>
	<data name="folderAlreadyExistsFormat" xml:space="preserve">
    <value>Folder {0} already Exists.</value>
    <comment>0=folderFullName</comment>
  </data>
	<data name="formCaptionReadOnlyFormat" xml:space="preserve">
    <value>{0} [Read-Only]</value>
    <comment>0=FileName</comment>
  </data>
	<data name="fragmentConfigFolderNameHelp" xml:space="preserve">
    <value>Unique name for the folder.</value>
  </data>
	<data name="fragmentConfigInvalidXmlFragment" xml:space="preserve">
    <value>The XML fragment is invalid.</value>
  </data>
	<data name="fragmentConfigNameHelp" xml:space="preserve">
    <value>Unique name for the XML data fragment.</value>
  </data>
	<data name="fragmentConfigXmlNameHelp" xml:space="preserve">
    <value>The XML data to be added during editing.</value>
  </data>
	<data name="fragmentNodeDescription" xml:space="preserve">
    <value>XML Data Fragment</value>
  </data>
	<data name="fragmentsRootNodeText" xml:space="preserve">
    <value>Fragments</value>
  </data>
	<data name="funcCannotLoadPropertySourceParameterFormat" xml:space="preserve">
    <value>Cannot find the required property sourced parameter "{0}" for the parameter "{1}" in function "{2}". The property sourced parameter must be one of the sibling parameters {3} when the control is {4}.</value>
    <comment>0=sourceParameter; 1=parameter; 2=function;3=SiblingParameterList; 4=ParameterSourcedProperyInputText</comment>
  </data>
	<data name="funcConfigCastReferenceAsHelp" xml:space="preserve">
    <value>Each segment (period delimited) contains a tile (~)(no cast required) or the fully qualified class name for the corresponding segment in the Reference Name when a cast is required for the segment.</value>
  </data>
	<data name="funcConfigFolderNameHelp" xml:space="preserve">
    <value>Unique name for the folder.</value>
  </data>
	<data name="funcConfigFunctionCategoryHelp" xml:space="preserve">
    <value>Specifies a semantic grouping for the function describing its usage (does it display a dialog or does it simply run a routine).</value>
  </data>
	<data name="funcConfigFunctionNameHelp" xml:space="preserve">
    <value>Unique name for the function used in the flow diagram.</value>
  </data>
	<data name="funcConfigGenericArgumentsHelp" xml:space="preserve">
    <value>Form for modifying generic arguments.</value>
  </data>
	<data name="funcConfigMemberNameHelp" xml:space="preserve">
    <value>Member name for the class field or property.</value>
  </data>
	<data name="funcConfigParametersLayoutHelp" xml:space="preserve">
    <value>In an edit form, parameter fields can be sequential or binary (either side of the function name).</value>
  </data>
	<data name="funcConfigReferenceCategoryHelp" xml:space="preserve">
    <value>Defines the function's membership as This, Type, Instance Reference, or Static Reference.</value>
  </data>
	<data name="funcConfigReferenceDefinitionHelp" xml:space="preserve">
    <value>Defines each segment (period delimited) of the Reference Name as a field, property or indexer.</value>
  </data>
	<data name="funcConfigReferenceNameHelp" xml:space="preserve">
    <value>Used when the Reference Category is a static or instance reference of the Activity Class.</value>
  </data>
	<data name="funcConfigReturnTypeHelp" xml:space="preserve">
    <value>Form for modifying the return type.</value>
  </data>
	<data name="funcConfigSummaryHelp" xml:space="preserve">
    <value>Comments describing the function.</value>
  </data>
	<data name="funcConfigTypeNameHelp" xml:space="preserve">
    <value>Fully qualified class name when the Reference Category is a type or a static reference.</value>
  </data>
	<data name="funcGenericArgNameInvalidFormat" xml:space="preserve">
    <value>The generic argument name "{0}" in function "{1}" is invalid.  Generic argument names must start with an alpha character or underscore and can contain only alphanumeric characters and underscores.</value>
    <comment>0=genericArgumentName;1=parameterName;2=functionName</comment>
  </data>
	<data name="funcGenericArgNotValidForAllReferenceCatFormat" xml:space="preserve">
    <value>Generic arguments are only valid when the reference category is "Type". Function name: "{0}".</value>
    <comment>0=functionName</comment>
  </data>
	<data name="funcGenericParameterArgNameNotFoundFormat" xml:space="preserve">
    <value>The generic argument name "{0}" for generic parameter "{1}" in function "{2}" is not one of the function's generic arguments: "{3}".</value>
    <comment>0=genericArgumentName;1=parameterName;2=functionName;3=listOfGenericArguments</comment>
  </data>
	<data name="funcGenericReturnTypeArgNameNotFoundFormat" xml:space="preserve">
    <value>The generic argument name "{0}" for the return type in function "{1}" is not one of the function's generic arguments: "{2}".</value>
    <comment>0=genericArgumentName;1=functionName;2=listOfGenericArguments</comment>
  </data>
	<data name="functionAlreadyConfiguredFormat" xml:space="preserve">
    <value>{0} was already configured.</value>
    <comment>0=function</comment>
  </data>
	<data name="functionBlankCategoryFormat" xml:space="preserve">
    <value>Reference Category for function "{0}" cannot be empty.</value>
    <comment>0=functionName</comment>
  </data>
	<data name="functionBlankDefinition" xml:space="preserve">
    <value>Reference Definition cannot be empty when the reference category is "Static Reference" or reference category is "Instance Reference".</value>
  </data>
	<data name="functionCannotLoadTypeForParameterFormat" xml:space="preserve">
    <value>Cannot load the type {0} for the parameter {1}. Please update the function configuration for {2}.</value>
    <comment>0=typeFullName;1=parameterName;2=functionName</comment>
  </data>
	<data name="functionDefinitionNotEmpty" xml:space="preserve">
    <value>Reference Definition must be empty when the reference category is "This", "Type" or "None".</value>
  </data>
	<data name="functionGenericArgsMisMatchFormat" xml:space="preserve">
    <value>The configured function's generic arguments "{0}" must match the data's generic arguments "{1}".</value>
    <comment>0=function's generic arguments;1= data's generic arguments</comment>
  </data>
	<data name="functionGenericArgsMisMatchFormat2" xml:space="preserve">
    <value>The configured function's reference category must be "{0}", and the type name "{1}" must be a generic type definition matching the generic arguments "{2}".</value>
    <comment>0reference category;1=function's type name;1= data's generic arguments</comment>
  </data>
	<data name="functionInvalidCategoryFormat" xml:space="preserve">
    <value>Function "{0}" has invalid Reference Category "{1}". Valid categories are:{2}{3}</value>
    <comment>0=functionName; 1=Referencecategory; 2=Environment.Newline; 3=ValidCategories</comment>
  </data>
	<data name="functionInvalidIndirectDefinitionFormat" xml:space="preserve">
    <value>Function "{0}" has invalid section "{1}" in its Reference Definition Field. Valid sections for indirect references include:{2}{3}</value>
    <comment>0=functionName; 1=ReferenceDefinition; 2=Environment.Newline; 3=ValidDefinitionList</comment>
  </data>
	<data name="functionInvalidIndirectDefinitionFormat2" xml:space="preserve">
    <value>Reference Definition has invalid section "{0}". Valid sections for indirect references include:{1}{2}</value>
    <comment>0=ReferenceDefinition; 1=Environment.Newline; 2=ValidDefinitionList</comment>
  </data>
	<data name="functionNameAndCastAsFormat" xml:space="preserve">
    <value>Function "{0}". When it is not empty, Cast Reference As and Reference Name must have an equal number of sections when the function is indirectly referenced by the Activity Class. e.g. Reference Name = foo.Bar.0.boz, Cast Reference As = ~.~.~."MyNameSpace.MyClass" (Use a tilde (~) where a cast is not needed. Use quotes as a text qualifier when the fully qualified class name contains a period).</value>
    <comment>0=functionName</comment>
  </data>
	<data name="functionNameAndCastRefAsFormat2" xml:space="preserve">
    <value>When it is not empty, Cast Reference As and Reference Name must have an equal number of sections when the function is indirectly referenced by the Activity Class. e.g. Reference Name = foo.Bar.1.boz, Cast Reference As = ~.~.~."MyNameSpace.MyClass" (Use a tilde (~) where a cast is not needed. Use quotes as a text qualifier when the fully qualified class name contains a period).</value>
  </data>
	<data name="functionNameAndDefinitionFormat" xml:space="preserve">
    <value>Function "{0}". Reference Name and Reference Definition must have an equal number of sections when the function is indirectly referenced by the Activity Class. e.g. Reference Name = foo.Bar.0.boz, Reference Definition = Field.Property.IntKeyValue.Field.</value>
    <comment>0=functionName</comment>
  </data>
	<data name="functionNameAndDefinitionFormat2" xml:space="preserve">
    <value>Reference Name and Reference Definition must have an equal number of sections when the function is indirectly referenced by the Activity Class. e.g. Reference Name = foo.Bar.1.boz, Reference Definition = Field.Property.IntKeyValue.Field</value>
  </data>
	<data name="functionNotAssignableFormat" xml:space="preserve">
    <value>The function "{0}" must be assignable to "{1}".</value>
    <comment>0=functionName;1=objectType</comment>
  </data>
	<data name="functionNotConfiguredFormat" xml:space="preserve">
    <value>Function "{0}" is not configured.</value>
    <comment>0=FunctionName</comment>
  </data>
	<data name="functionReferenceInfoMustBePopulatedFormat" xml:space="preserve">
    <value>Reference Name and Reference Definition field for function {0} must be populated when the reference category is "Instance Reference" or reference category is "Static Reference".</value>
    <comment>0=functionName</comment>
  </data>
	<data name="functionReferenceMustBeEmptyFormat" xml:space="preserve">
    <value>Reference Name field for function {0} must be empty when the reference category is "This", "Type" or "None".</value>
  </data>
	<data name="functionsRootFolderText" xml:space="preserve">
    <value>Functions</value>
  </data>
	<data name="functionToStringFormat" xml:space="preserve">
    <value>{0} - {1}({2})</value>
    <comment>0=functionName 1=Type 2=parametersToString</comment>
  </data>
	<data name="functionTypeNameMustBeEmpty" xml:space="preserve">
    <value>Type Name field must be empty when the reference category is not "Type"or "Static Reference".</value>
  </data>
	<data name="functionTypeNameMustBeEmptyFormat" xml:space="preserve">
    <value>Type Name field for function {0} must be empty when the reference category is not "Type"or "Static Reference".</value>
    <comment>0=functionName</comment>
  </data>
	<data name="functionVisibleTextBegin" xml:space="preserve">
    <value>[</value>
    <comment>Must be a string with length==1 i.e. character e.g. Set Variable: {&lt;AAS Table Key&gt; EqualsUS GGG&lt;ACIS INL usoc&gt;HHH[Table: value=phone;key=MM;field=DD]}</comment>
  </data>
	<data name="functionVisibleTextEnd" xml:space="preserve">
    <value>]</value>
    <comment>Must be a string with length==1 i.e. character</comment>
  </data>
	<data name="genericArgNameInvalid" xml:space="preserve">
    <value>Generic argument names must start with an alpha character or underscore and can contain only alphanumeric characters and underscores.</value>
  </data>
	<data name="genericArgNameInvalidFormat" xml:space="preserve">
    <value>{0} "{1}" is invalid.  Generic argument names must start with an alpha character or underscore and can contain only alphanumeric characters and underscores.</value>
    <comment>0=label;1=value</comment>
  </data>
	<data name="genericArgumentsCountMismatch" xml:space="preserve">
    <value>The number of generic arguments {0}, does not match the type {1}.</value>
    <comment>0=Argument count; 1=Generic Type Definition Name</comment>
  </data>
	<data name="genericArgumentsNotConfigured" xml:space="preserve">
    <value>Generic arguments have not been configured.</value>
  </data>
	<data name="genericFuncNodeDescription" xml:space="preserve">
    <value>Returns a generic type.</value>
  </data>
	<data name="genericMethodsNotSupportedFormat" xml:space="preserve">
    <value>Generic methods are not supported. Method name: "{0}".</value>
    <comment>0=methodName</comment>
  </data>
	<data name="genericParameterArgNameNotFoundFormat" xml:space="preserve">
    <value>The generic argument name "{0}" for generic parameter "{1}" in constructor "{2}" is not one of the constructor's generic arguments: "{3}".</value>
    <comment>0=genericArgumentName;1=parameterName;2=constructorName;3=listOfGenericArguments</comment>
  </data>
	<data name="genericParamNodeDescription" xml:space="preserve">
    <value>Generic Parameter</value>
  </data>
	<data name="genericTypeDescriptionFormat" xml:space="preserve">
    <value>{0}&lt;{1}&gt;</value>
    <comment>0=TypeName; 1=comma delimited list of genric arguments</comment>
  </data>
	<data name="hashSetFormGroupBoxTitle" xml:space="preserve">
    <value>Hash Set</value>
  </data>
	<data name="initialParameterTypeNameFormat" xml:space="preserve">
    <value>{0} {1}</value>
  </data>
	<data name="inputFileNewFileNameCaption" xml:space="preserve">
    <value>New File Name</value>
  </data>
	<data name="inputFileNewFileNamePrompt" xml:space="preserve">
    <value>Enter New File Name:</value>
  </data>
	<data name="inputFileNewFolderNameCaption" xml:space="preserve">
    <value>New Folder Name</value>
  </data>
	<data name="inputFileNewFolderNamePrompt" xml:space="preserve">
    <value>Enter New Folder Name:</value>
  </data>
	<data name="inputNewActionNameCaption" xml:space="preserve">
    <value>New Function Name</value>
  </data>
	<data name="inputNewActionNamePrompt" xml:space="preserve">
    <value>Enter New Function Name</value>
  </data>
	<data name="inputNewProjectNameCaption" xml:space="preserve">
    <value>New Project Name</value>
  </data>
	<data name="inputNewProjectNamePrompt" xml:space="preserve">
    <value>Enter New Project Name:</value>
  </data>
	<data name="installVisio2010or2013or2016or2019x64" xml:space="preserve">
    <value>You are running BPS Logic Builder for Visio (x64) 2010, 2013, 2016, 2019 or 2021.  Please install the x64 version of Visio 2010 or Visio 2013 or Visio 2016 or Visio 2019 or Visio 2021. Please note that only one version can be installed at a time.</value>
  </data>
	<data name="installVisio2010or2013or2016or2019x86" xml:space="preserve">
    <value>You are running BPS Logic Builder for Visio (x86) 2010, 2013, 2016, 2019 or 2021.  Please install the x86 version of Visio 2010 or Visio 2013 or Visio 2016 or Visio 2019 or Visio 2021. Please note that only one version can be installed at a time.</value>
  </data>
	<data name="integersOnly" xml:space="preserve">
    <value>Integers only.</value>
  </data>
	<data name="invalidAnyParameterConfigurationForBinaryOperatorFormat" xml:space="preserve">
		<value>For the binary operator "{0}", both parameters can be of literal type "Any" or neither can be of literal type "Any". First parameter: "{1}", second parameter: "{2}".</value>
	</data>
	<data name="invalidArgumentTextFormat" xml:space="preserve">
    <value>Invalid Argument {0}.</value>
  </data>
	<data name="invalidAttributeFormat" xml:space="preserve">
    <value>{0} cannot include the following characters: " \</value>
    <comment>0=Form label text</comment>
  </data>
	<data name="invalidClassNameFormat" xml:space="preserve">
    <value>{0} is invalid.  Fully Qualified Class Names must start with an alpha character or underscore and can contain only alphanumeric characters, periods, plus (+) characters and underscores.</value>
    <comment>0=ClassName</comment>
  </data>
	<data name="invalidConfigurationDocumentFormat" xml:space="preserve">
    <value>{0} has invalid data.</value>
    <comment>{0}=fileFullName</comment>
  </data>
	<data name="invalidConsParameterOrder" xml:space="preserve">
    <value>The parameter order for constructor "{0}" is invalid. Move optional parameters to the end of the parameters list.</value>
    <comment>0=FunctionName</comment>
  </data>
	<data name="invalidCellData" xml:space="preserve">
    <value>Invalid Data.</value>
  </data>
	<data name="invalidDomainFormat" xml:space="preserve">
    <value>{0} "{1}" is not a valid {2}.</value>
    <comment>0=label 1=text 2=type</comment>
  </data>
	<data name="invalidFileNameMessageFormat" xml:space="preserve">
    <value>{0} File Name must be less than 50 characters long and cannot include the following characters: \ / : * ? &lt; &gt; |</value>
    <comment>0=Form Field</comment>
  </data>
	<data name="invalidFilePathMessageFormat" xml:space="preserve">
    <value>{0} File Path must be less than 230 characters long and cannot include the following characters: * ? &lt; &gt; |</value>
    <comment>0=Form Field</comment>
  </data>
	<data name="invalidFunctionCategoryFormat" xml:space="preserve">
    <value>Function "{0}" has invalid function category "{1}" given the element type "{2}".</value>
    <comment>0=functionName;1=functionCategory;2=elementName</comment>
  </data>
	<data name="invalidInputMessage" xml:space="preserve">
    <value>Invalid Input!</value>
  </data>
	<data name="invalidLiteralInputFormat" xml:space="preserve">
    <value>Input "{0}" is invalid for the literal type "{1}".</value>
    <comment>0=input, 1=Type</comment>
  </data>
	<data name="invalidLiteralInputFormat2" xml:space="preserve">
    <value>Input is invalid for the literal type "{0}".</value>
    <comment>0=Type</comment>
  </data>
	<data name="invalidMaster" xml:space="preserve">
    <value>Shape must belong to the Logic Builder or Applications Stencil.</value>
  </data>
	<data name="invalidModuleName" xml:space="preserve">
    <value>Module name {0} is invalid.</value>
    <comment>0=ModuleName</comment>
  </data>
	<data name="invalidParameterElementFormat" xml:space="preserve">
    <value>The parameter "{0}" has an invalid element for the category "{1}".</value>
    <comment>0=parameterName;1=parameterCategory;</comment>
  </data>
	<data name="invalidParameterOrder" xml:space="preserve">
    <value>The parameter order for function "{0}" is invalid. Move optional parameters to the end of the parameters list.</value>
    <comment>0=FunctionName</comment>
  </data>
	<data name="invalidPriorityCellData" xml:space="preserve">
    <value>Priority must be an integer greater than zero.</value>
  </data>
	<data name="invalidRuleSetFormat" xml:space="preserve">
    <value>The rule set file "{0}" is invalid.</value>
    <comment>0=RuleSetName</comment>
  </data>
	<data name="invalidShapeMessage" xml:space="preserve">
    <value>Please use shapes form the specified Logic Builder Stencils only.</value>
  </data>
	<data name="invalidTxtNameTextFormat" xml:space="preserve">
    <value>{0} must be less than 50 characters long and cannot include the following characters: " \</value>
    <comment>0=Variable, Function or Folder Name</comment>
  </data>
	<data name="invalidUrlInputFormat" xml:space="preserve">
    <value>Url in "{0}" is invalid.</value>
  </data>
	<data name="invalidVariableElementFormat" xml:space="preserve">
    <value>The variable "{0}" has an invalid value element for the category "{1}".</value>
    <comment>0=parameterName;1=parameterCategory;</comment>
  </data>
	<data name="invalidVariableOrFunctionNameFormat" xml:space="preserve">
    <value>{0} is invalid. Variable or function names must start with an alpha character or underscore and can contain only alphanumeric characters and underscores.</value>
    <comment>0=FieldName</comment>
  </data>
	<data name="itemAlreadyListed" xml:space="preserve">
    <value>Item {0} is aready in in the list.</value>
    <comment>0=new item</comment>
  </data>
	<data name="itemsCommaSeparator" xml:space="preserve">
    <value>, </value>
  </data>
	<data name="jumpConnectorsBothDirections" xml:space="preserve">
    <value>For a Jump Shape, the connectors must be all incoming or all outgoing.</value>
  </data>
	<data name="jumpShape1OutGoing" xml:space="preserve">
    <value>Only one outgoing connector allowed per Jump Shape.</value>
  </data>
	<data name="jumpShapeDataRequired" xml:space="preserve">
    <value>Jump Shape requires data.</value>
  </data>
	<data name="jumpShapeNoMatchingFromShape" xml:space="preserve">
    <value>"To" Jump Shape has no matching "From" Jump Shape.</value>
  </data>
	<data name="jumpShapeNoMatchingToShape" xml:space="preserve">
    <value>"From" Jump Shape has no matching "To" Jump Shape.</value>
  </data>
	<data name="jumpShapeUniqueTextForToShape" xml:space="preserve">
    <value>Duplicate Jump Shape. Text in a "To" Jump Shapes must be unique.</value>
  </data>
	<data name="lblGenericArgumentsText" xml:space="preserve">
    <value>Generic Arguments</value>
  </data>
	<data name="listFormGroupBoxTitle" xml:space="preserve">
    <value>List</value>
  </data>
	<data name="listItemIsEmpty" xml:space="preserve">
    <value>Item is empty.</value>
    <comment>0=new item</comment>
  </data>
	<data name="listOfGenericsFuncNodeDescription" xml:space="preserve">
    <value>Returns a list of generics.</value>
  </data>
	<data name="listOfGenericsParamNodeDescription" xml:space="preserve">
    <value>List of Generics Parameter</value>
  </data>
	<data name="listOfLiteralsFuncNodeDescription" xml:space="preserve">
    <value>Returns a list of literals.</value>
  </data>
	<data name="listOfLiteralsGenericArgDescription" xml:space="preserve">
    <value>List of Literals</value>
  </data>
	<data name="listOfLiteralsParamNodeDescription" xml:space="preserve">
    <value>List of Literals Parameter</value>
  </data>
	<data name="listOfLiteralsVarNodeDescription" xml:space="preserve">
    <value>List of Literals Variable</value>
  </data>
	<data name="listOfObjectsFuncNodeDescription" xml:space="preserve">
    <value>Returns a list of objects.</value>
  </data>
	<data name="listOfObjectsGenericArgDescription" xml:space="preserve">
    <value>List of Objects</value>
  </data>
	<data name="listOfObjectsParamNodeDescription" xml:space="preserve">
    <value>List of Objects Parameter</value>
  </data>
	<data name="listOfObjectsVarNodeDescription" xml:space="preserve">
    <value>List of Objects Variable</value>
  </data>
	<data name="listParameterCountFormat" xml:space="preserve">
    <value>{0}: Count({1})</value>
    <comment>0=parameterName;1=itemCount;</comment>
  </data>
	<data name="listParameterTypeNameFormat" xml:space="preserve">
    <value>{0}Of{1}: {2}</value>
    <comment>0=listType 1=UnderlyingType 2=name</comment>
  </data>
	<data name="listDescriptionFormat" xml:space="preserve">
    <value>{0} Of {1}</value>
    <comment>0=listType 1=UnderlyingType</comment>
  </data>
	<data name="listVariableTypeFormat" xml:space="preserve">
    <value>{0}Of{1}</value>
    <comment>0=listType 1=UnderlyingType</comment>
  </data>
	<data name="listViewTextTbl" xml:space="preserve">
    <value>(*.TBL)</value>
  </data>
	<data name="listViewTextVsd" xml:space="preserve">
    <value>(*.VSD)</value>
  </data>
	<data name="listViewTextVsdx" xml:space="preserve">
    <value>(*.VSDX)</value>
  </data>
	<data name="literalFuncNodeDescription" xml:space="preserve">
    <value>Returns a literal type.</value>
  </data>
	<data name="literalGenericArgDescription" xml:space="preserve">
    <value>Literal</value>
  </data>
	<data name="literalListChildNodeTextFormat" xml:space="preserve">
    <value>{0}[{1}]</value>
    <comment>0=listname;1=item index</comment>
  </data>
	<data name="literalParameterDescriptionFormat" xml:space="preserve">
    <value>{0}={1}</value>
    <comment>0=parameterName 1=parameterVisibleText</comment>
  </data>
	<data name="literalParamNodeDescription" xml:space="preserve">
    <value>Literal Parameter</value>
  </data>
	<data name="literalVarNodeDescription" xml:space="preserve">
    <value>Literal Variable</value>
  </data>
	<data name="loadingAssemblies" xml:space="preserve">
    <value>Reloading assemblies. Please wait.</value>
  </data>
	<data name="loadingAssemblies2" xml:space="preserve">
    <value>Loading assemblies. Please wait.</value>
  </data>
	<data name="matchingShapesAndCellsFormat" xml:space="preserve">
    <value>Matching shapes and cells: {0}   Matching files: {1}   Total files searched: {2}</value>
    <comment>0=Matching Shapes Or Cells Found; 1=#Matching Files; 2=Files Searched</comment>
  </data>
	<data name="memberNameIsInvalidFormat" xml:space="preserve">
    <value>Member Name Field for function {0} is invalid. Variable or function names must start with an alpha character or underscore and can contain only alphanumeric characters and underscores.</value>
    <comment>0=functionName</comment>
  </data>
	<data name="memberNameIsInvalidForVariableCategoryFormat" xml:space="preserve">
    <value>Member Name "{0}" is invalid for the Variable Category "{1}".</value>
    <comment>0=functionName</comment>
  </data>
	<data name="memberParametersFormat" xml:space="preserve">
    <value>{0}: {1}</value>
    <comment>0=functionName;1=parametersList;</comment>
  </data>
	<data name="mergeAppConnectorComments" xml:space="preserve">
    <value>Merge Object requires a minimum of two attached application connectors all pointing in the same direction (all incoming or all outgoing).</value>
  </data>
	<data name="mergeBranchingComments" xml:space="preserve">
    <value>When branching the process, Merge Object requires at least one incoming non-application connector.</value>
  </data>
	<data name="mergeHasAppAndNonAppInConnectors" xml:space="preserve">
    <value>Merge Object may not be attached to both application and regular incoming connectors.</value>
  </data>
	<data name="mergeHasAppAndNonAppOutConnectors" xml:space="preserve">
    <value>Merge Object may not be attached to both application and regular outgoing connectors.</value>
  </data>
	<data name="mergeHasInAndOutAppConnectors" xml:space="preserve">
    <value>Merge Object may not be attached to both outgoing and incoming application connectors.</value>
  </data>
	<data name="mergeHasInAndOutNonAppConnectors" xml:space="preserve">
    <value>Merge Object may not be attached to both outgoing and incoming non-application connectors.</value>
  </data>
	<data name="mergeMergingComments" xml:space="preserve">
    <value>When merging processes, Merge Object requires exactly one outgoing non-application connector.</value>
  </data>
	<data name="metaObjectRequiredForDialogConnectorsFormat" xml:space="preserve">
    <value>The {0} element is required for dialog connectors.</value>
    <comment>0=connector category</comment>
  </data>
	<data name="mnuItemAddBinaryOperatorText" xml:space="preserve">
    <value>Binary Operator</value>
  </data>
	<data name="mnuItemAddConfigurationFolderText" xml:space="preserve">
    <value>Folder...</value>
  </data>
	<data name="mnuItemAddConstructorText" xml:space="preserve">
    <value>Constructor...</value>
  </data>
	<data name="mnuItemAddDialogFunctionText" xml:space="preserve">
    <value>Dialog Function</value>
  </data>
	<data name="mnuItemAddExistingFileText" xml:space="preserve">
    <value>Existing...</value>
  </data>
	<data name="mnuItemAddFileText" xml:space="preserve">
    <value>Add File...</value>
  </data>
	<data name="mnuItemAddFragmentText" xml:space="preserve">
    <value>Fragment</value>
  </data>
	<data name="mnuItemAddGenericParameterText" xml:space="preserve">
    <value>Generic Parameter...</value>
  </data>
	<data name="mnuItemAddImplementedListOfLiteralsVariableText" xml:space="preserve">
    <value>List of Literals Variable</value>
  </data>
	<data name="mnuItemAddImplementedListOfObjectsVariableText" xml:space="preserve">
    <value>List of Objects Variable</value>
  </data>
	<data name="mnuItemAddImplementedLiteralVariableText" xml:space="preserve">
    <value>Literal Variable</value>
  </data>
	<data name="mnuItemAddImplementedObjectVariableText" xml:space="preserve">
    <value>Object Variable</value>
  </data>
	<data name="mnuItemAddListOfGenericsParameterText" xml:space="preserve">
    <value>List of Generics Parameter...</value>
  </data>
	<data name="mnuItemAddListOfLiteralsParameterText" xml:space="preserve">
    <value>List of Literals Parameter...</value>
  </data>
	<data name="mnuItemAddListOfObjectsParameterText" xml:space="preserve">
    <value>List of Objects Parameter...</value>
  </data>
	<data name="mnuItemAddLiteralParameterText" xml:space="preserve">
    <value>Literal Parameter...</value>
  </data>
	<data name="mnuItemAddMembersText" xml:space="preserve">
    <value>Class Members...</value>
  </data>
	<data name="mnuItemAddNewFileText" xml:space="preserve">
    <value>New...</value>
  </data>
	<data name="mnuItemAddNewRowText" xml:space="preserve">
    <value>Add New Row</value>
  </data>
	<data name="mnuItemAddObjectParameterText" xml:space="preserve">
    <value>Object Parameter...</value>
  </data>
	<data name="mnuItemAddStandardFunctionText" xml:space="preserve">
    <value>Standard Function</value>
  </data>
	<data name="mnuItemAddText" xml:space="preserve">
    <value>Add</value>
  </data>
	<data name="mnuItemAddTextWithEllipses" xml:space="preserve">
    <value>Add...</value>
  </data>
	<data name="mnuItemAddUpdateGenericArguments" xml:space="preserve">
    <value>Add/Update Generic Arguments</value>
  </data>
	<data name="mnuItemClearText" xml:space="preserve">
    <value>Clear</value>
  </data>
	<data name="mnuItemCloseProjectText" xml:space="preserve">
    <value>Close Project</value>
  </data>
	<data name="mnuItemCopyCellText" xml:space="preserve">
    <value>Copy Cell</value>
  </data>
	<data name="mnuItemCopyRowText" xml:space="preserve">
    <value>Copy Row</value>
  </data>
	<data name="mnuItemCopyText" xml:space="preserve">
    <value>Copy</value>
  </data>
	<data name="mnuItemCopyToClipboardText" xml:space="preserve">
    <value>Copy to Clipboard</value>
  </data>
	<data name="mnuItemCopyXml" xml:space="preserve">
    <value>Copy XML to Clipboard</value>
  </data>
	<data name="mnuItemCreateDirectoryText" xml:space="preserve">
    <value>Create Folder</value>
  </data>
	<data name="mnuItemCutText" xml:space="preserve">
    <value>Cut</value>
  </data>
	<data name="mnuItemDeleteRowText" xml:space="preserve">
    <value>Delete Row</value>
  </data>
	<data name="mnuItemDeleteText" xml:space="preserve">
    <value>Delete</value>
  </data>
	<data name="mnuItemDeleteAllRulesText" xml:space="preserve">
    <value>Delete All Rules</value>
  </data>
	<data name="mnuItemEditText" xml:space="preserve">
    <value>Edit</value>
  </data>
	<data name="mnuItemInsertText" xml:space="preserve">
    <value>Insert</value>
  </data>
	<data name="mnuItemInsertConstructorText" xml:space="preserve">
    <value>Constructor</value>
  </data>
	<data name="mnuItemInsertCopiedRowText" xml:space="preserve">
    <value>Insert Copied Row</value>
  </data>
	<data name="mnuItemInsertFunctionText" xml:space="preserve">
    <value>Function</value>
  </data>
	<data name="mnuItemInsertNewRowText" xml:space="preserve">
    <value>Insert New Row</value>
  </data>
	<data name="mnuItemInsertVariableText" xml:space="preserve">
    <value>Variable</value>
  </data>
	<data name="mnuItemOpenFileText" xml:space="preserve">
    <value>Open File</value>
  </data>
	<data name="mnuItemOpenInTextViewerText" xml:space="preserve">
    <value>Open In Text Viewer</value>
  </data>
	<data name="mnuItemPasteCellText" xml:space="preserve">
    <value>Paste Cell</value>
  </data>
	<data name="mnuItemPasteRowText" xml:space="preserve">
    <value>Paste Row</value>
  </data>
	<data name="mnuItemPasteText" xml:space="preserve">
    <value>Paste</value>
  </data>
	<data name="mnuItemRefreshText" xml:space="preserve">
    <value>Refresh</value>
  </data>
	<data name="mnuItemRenameText" xml:space="preserve">
    <value>Rename...</value>
  </data>
	<data name="mnuItemReplaceWithListOfLiteralsParameterText" xml:space="preserve">
    <value>Replace with List of Literals Parameter</value>
  </data>
	<data name="mnuItemReplaceWithListOfObjectsParameterText" xml:space="preserve">
    <value>Replace with List of Objects Parameter</value>
  </data>
	<data name="mnuItemReplaceWithLiteralParameterText" xml:space="preserve">
    <value>Replace with Literal Parameter</value>
  </data>
	<data name="mnuItemReplaceWithObjectParameterText" xml:space="preserve">
    <value>Replace with Object Parameter</value>
  </data>
	<data name="mnuItemSelectAllText" xml:space="preserve">
    <value>Select All</value>
  </data>
	<data name="mnuItemToAssemblyQualifiedName" xml:space="preserve">
    <value>To Assembly Qualified Name</value>
  </data>
	<data name="mnuItemToCamelCaseText" xml:space="preserve">
    <value>To Camel Case</value>
  </data>
	<data name="mnuItemValidateRulesText" xml:space="preserve">
    <value>Validate</value>
  </data>
	<data name="mnuItemViewRulesText" xml:space="preserve">
    <value>View</value>
  </data>
	<data name="moduleEndIsInvalidForBeginFlow" xml:space="preserve">
    <value>Module End shape is invalid when the initial shape is Begin Flow.</value>
  </data>
	<data name="moduleIsExcludedFormat" xml:space="preserve">
    <value>Module {0} is excluded for application {1}. To configure excluded modules, select Project/Project Properties. In the Applications tab, select the relevant application.  Click on the button in the excluded modules text box.</value>
    <comment>0=ModuleName; 1=ApplicationName</comment>
  </data>
	<data name="moduleShapeDataRequired" xml:space="preserve">
    <value>Module Shape requires data.</value>
  </data>
	<data name="moduleShapeIncoming" xml:space="preserve">
    <value>Module Shape requires at least one incoming connector.</value>
  </data>
	<data name="moduleShapeOutgoing" xml:space="preserve">
    <value>Module Shape requires a single blank outgoing connector.</value>
  </data>
	<data name="multipleChoiceParamNotLastFormat" xml:space="preserve">
    <value>Error configuring method {0}. The connectors multiple choice parameter must be the last parameter.</value>
    <comment>0=functionName</comment>
  </data>
	<data name="neitherOperandCanBeEmptyBinaryOperationAny" xml:space="preserve">
    <value>Neither operand can be empty if 1) the function is a binary operation, 2) parameter type for the operands is Any, and 3) the other operand is not nullable.</value>
  </data>
	<data name="noConnectorsOnJumpFormat" xml:space="preserve">
    <value>Jump shape has no connectors.</value>
  </data>
	<data name="noCurrentRow" xml:space="preserve">
    <value>No current row to search.</value>
  </data>
	<data name="notFromDecisionSeparator" xml:space="preserve">
    <value>:</value>
    <comment>NotUS: &lt;ACIS INL usoc&gt; EqualsUS HWWXB</comment>
  </data>
	<data name="notFromDecisionStringFormat" xml:space="preserve">
    <value>({0}{1} {2})</value>
    <comment>e.g. 0="Not" 1=: 2="&lt;ACIS INL usoc&gt; EqualsUS HWWXB" </comment>
  </data>
	<data name="notImplementedMessageFormat" xml:space="preserve">
    <value>Method not implemented in {0}.</value>
  </data>
	<data name="notString" xml:space="preserve">
    <value>Not</value>
  </data>
	<data name="notValidTypeFormat" xml:space="preserve">
    <value>"{0}" is not a valid {1}.</value>
    <comment>0=invalid value;1=TypeName.</comment>
  </data>
	<data name="objectFuncNodeDescription" xml:space="preserve">
    <value>Returns an object type.</value>
  </data>
	<data name="objectGenericArgDescription" xml:space="preserve">
    <value>Object</value>
  </data>
	<data name="objectListChildNodeTextFormat" xml:space="preserve">
    <value>{0}[{1}]</value>
    <comment>0=listname;1=item index</comment>
  </data>
	<data name="objectParamNodeDescription" xml:space="preserve">
    <value>Object Parameter</value>
  </data>
	<data name="objectVarNodeDescription" xml:space="preserve">
    <value>Object Variable</value>
  </data>
	<data name="oneSearchOccurrence" xml:space="preserve">
    <value>1 found.</value>
  </data>
	<data name="operationComplete" xml:space="preserve">
    <value>Operation Complete!</value>
  </data>
	<data name="othersConnectorInvalid" xml:space="preserve">
    <value>Others Connect Object is invalid when all applications are accounted for.</value>
  </data>
	<data name="pageIndexIsInvalidFormat" xml:space="preserve">
    <value>Page Index {0} is invalid.</value>
    <comment>0=pageIndex</comment>
  </data>
	<data name="pageMovedOrDeleted" xml:space="preserve">
    <value>Page has been moved or deleted.</value>
  </data>
	<data name="parameterCountMustBeTwoFormat" xml:space="preserve">
    <value>Because Parameters Layout is Binary, function {0} must have exactly 2 parameters.</value>
  </data>
	<data name="parameterFromValueSeparator" xml:space="preserve">
    <value>=</value>
    <comment>Descr: value=HHH[Substring: start=0;finish=1;value=TTTTT][Concat desp: value=GG;desparg=HH]</comment>
  </data>
	<data name="parameterListFormat" xml:space="preserve">
    <value>Parameters: {0}</value>
    <comment>0=parameters</comment>
  </data>
	<data name="parameterNotLiteralFormat" xml:space="preserve">
    <value>The parameter "{0}" of type "{1}" is not a valid literal.</value>
  </data>
	<data name="parameterNotOptionalFormat" xml:space="preserve">
    <value>Parameter "{0}" is not optional.</value>
  </data>
	<data name="parametersDelimiter" xml:space="preserve">
    <value>;</value>
  </data>
	<data name="parametersLayoutMustBeBinaryFormat" xml:space="preserve">
    <value>Parameters Layout for function {0} must be "Binary" when the function category is "Binary Operator".</value>
    <comment>0=functionName</comment>
  </data>
	<data name="parametersNotCompatibleForBinaryOperation" xml:space="preserve">
    <value>The parameter types "{0}" and "{1}" cannot be applied as operands in the binary operation "{2}".</value>
  </data>
	<data name="parameterTypeNameFormat2" xml:space="preserve">
    <value>{0}: {1}</value>
    <comment>0=type 1=name</comment>
  </data>
	<data name="popupConstructorDescriptionFormat" xml:space="preserve">
    <value>{{{0}}}</value>
  </data>
	<data name="popupFunctionDescriptionFormat" xml:space="preserve">
    <value>[{0}]</value>
    <comment>0=FunctionName</comment>
  </data>
	<data name="popupLiteralListDescriptionFormat" xml:space="preserve">
    <value>{0}</value>
  </data>
	<data name="popupObjectListDescriptionFormat" xml:space="preserve">
    <value>{0}</value>
  </data>
	<data name="popupObjectNullDescription" xml:space="preserve">
    <value>{null}</value>
  </data>
	<data name="popupVariableDescriptionFormat" xml:space="preserve">
    <value>&lt;{0}&gt;</value>
    <comment>0=VariableName</comment>
  </data>
	<data name="progressFormOperationCancelled" xml:space="preserve">
    <value>Operation Cancelled</value>
  </data>
	<data name="progressFormOperationComplete" xml:space="preserve">
    <value>Complete</value>
  </data>
	<data name="progressFormStatusMessageFormat2" xml:space="preserve">
    <value>{0}: {1}% complete.</value>
    <comment>0=messsage; 1=percent complete</comment>
  </data>
	<data name="progressFormTaskAssemblingResourcesFormat" xml:space="preserve">
    <value>Assembling {0} Resources</value>
    <comment>0=applicationNickname</comment>
  </data>
	<data name="progressFormTaskAssemblingRulesFormat" xml:space="preserve">
    <value>Assembling {0} Rules</value>
    <comment>0=applicationNickname</comment>
  </data>
	<data name="progressFormTaskBuildingFormat" xml:space="preserve">
    <value>Building {0}</value>
    <comment>0=filename</comment>
  </data>
	<data name="progressFormTaskInitializing" xml:space="preserve">
    <value>Initializing</value>
  </data>
	<data name="progressFormTaskInitializingPageFormat" xml:space="preserve">
    <value>Initializing Page {0}</value>
    <comment>0=PageIndex</comment>
  </data>
	<data name="progressFormTaskSearchingFileFormat" xml:space="preserve">
    <value>Searching {0}</value>
    <comment>0=FileName</comment>
  </data>
	<data name="progressFormTaskValidatingFormat" xml:space="preserve">
    <value>Validating {0}</value>
    <comment>0=filename</comment>
  </data>
	<data name="progressFormTaskValidatingPageFormat" xml:space="preserve">
    <value>Validating {0} page {1}</value>
    <comment>0=FileName; 1=PageIndex</comment>
  </data>
	<data name="projectPathCannotBeTheRootFolderFormat" xml:space="preserve">
		<value>The project path "{0}" cannot be the root folder.</value>
		<comment>0=project path</comment>
	</data>
	<data name="projectPathDoesNotExistFormat" xml:space="preserve">
		<value>The project path "{0}" does not exist.</value>
		<comment>0=project path</comment>
	</data>
	<data name="projectPropertiesRootNodeText" xml:space="preserve">
    <value>Project Properties</value>
  </data>
	<data name="referenceCannotEqualVariable" xml:space="preserve">
    <value>The variable index cannot be the same as the variable it references. Reference Name: "{0}", variable: "{1}".</value>
    <comment>0=referenceName; 1=variableName</comment>
  </data>
	<data name="referenceCategoryCannotBeNoneFormat" xml:space="preserve">
    <value>Reference Category for function {0} cannot be "None" given the function category.</value>
  </data>
	<data name="referenceCategoryMustBeNoneFormat" xml:space="preserve">
    <value>Reference Category for function {0} must be "None" when the function category is "Binary Operator".</value>
  </data>
	<data name="referenceNameAndCastReferenceAFormat" xml:space="preserve">
    <value>Variable "{0}". When it is not empty, Cast Reference As and Reference Name must have an equal number of sections when the variable is indirectly referenced by the Activity Class. e.g. Reference Name = foo.Bar.1.boz, Cast Reference As = ~.~.~."MyNameSpace.MyClass" (Use a tilde (~) where a cast is not needed. Use quotes as a text qualifier when the fully qualified class name contains a period).</value>
    <comment>0=VariableName</comment>
  </data>
	<data name="referenceNamePlaceHolder" xml:space="preserve">
    <value>referenceNameHere</value>
  </data>
	<data name="replaceConstructorFormText" xml:space="preserve">
    <value>Replace Constructor</value>
  </data>
	<data name="replaceFunctionFormText" xml:space="preserve">
    <value>Replace Function</value>
  </data>
	<data name="replaceTextFormText" xml:space="preserve">
    <value>Replace Text</value>
  </data>
	<data name="replaceVariableFormText" xml:space="preserve">
    <value>Replace Variable</value>
  </data>
	<data name="requiredParameterIsEmptyFormat" xml:space="preserve">
    <value>The required parameter "{0}" is empty.</value>
    <comment>0=parameterName</comment>
  </data>
	<data name="retTypeGenericArgumentHelp" xml:space="preserve">
    <value>The function's generic argument used in the return type.</value>
  </data>
	<data name="retTypeListTypeHelp" xml:space="preserve">
    <value>The list type can be ab array, collection or list.</value>
  </data>
	<data name="retTypeLiteralTypeHelp" xml:space="preserve">
    <value>The type of the literal to return.</value>
  </data>
	<data name="retTypeObjectHelp" xml:space="preserve">
    <value>The objects's return type.</value>
  </data>
	<data name="returnTypeFieldNotSelectedFormat" xml:space="preserve">
    <value>{0} must be selected.</value>
    <comment>0=labelName or property name</comment>
  </data>
	<data name="rowIndexIsInvalidFormat" xml:space="preserve">
    <value>Row Index {0} is invalid.</value>
    <comment>0=1based Row Number</comment>
  </data>
	<data name="ruleErrorMatch" xml:space="preserve">
    <value>^Rule ".+" validation failed.</value>
  </data>
	<data name="ruleSetIsValidFormat" xml:space="preserve">
    <value>Module "{0}" is valid.</value>
    <comment>0=ModuleName</comment>
  </data>
	<data name="ruleSetListViewColumnHeaderTextActive" xml:space="preserve">
    <value>Active</value>
  </data>
	<data name="ruleSetListViewColumnHeaderTextName" xml:space="preserve">
    <value>Name</value>
  </data>
	<data name="ruleSetListViewColumnHeaderTextPriority" xml:space="preserve">
    <value>Priority</value>
  </data>
	<data name="ruleSetListViewColumnHeaderTextReevaluation" xml:space="preserve">
    <value>Reevaluation</value>
  </data>
	<data name="ruleSetListViewColumnHeaderTextRulePreview" xml:space="preserve">
    <value>Rule Preview</value>
  </data>
	<data name="saveFormQuestionFormat" xml:space="preserve">
    <value>Save {0}?</value>
    <comment>0=FileName</comment>
  </data>
	<data name="searchAllPagesComplete" xml:space="preserve">
    <value>Finished searching all pages.</value>
  </data>
	<data name="searchAllRowsComplete" xml:space="preserve">
    <value>Finished searching all rows.</value>
  </data>
	<data name="searchOccurrencesFormat" xml:space="preserve">
    <value>{0} found.</value>
    <comment>0=occurrences</comment>
  </data>
	<data name="searchPageComplete" xml:space="preserve">
    <value>Finished searching the page.</value>
  </data>
	<data name="searchRowComplete" xml:space="preserve">
    <value>Finished searching the current row.</value>
  </data>
	<data name="selectRulesToDelete" xml:space="preserve">
    <value>Select Rules to Delete</value>
  </data>
	<data name="selectRulesToDeploy" xml:space="preserve">
    <value>Select Rules to Deploy</value>
  </data>
	<data name="selectRulesToValidate" xml:space="preserve">
    <value>Select Rules to Validate</value>
  </data>
	<data name="setValueFunctionVisibleTextFormat" xml:space="preserve">
    <value>{0}: {{{1}}}</value>
    <comment>0=function name; 1=operation description,; e.g. Set Value: {&lt;var&gt; Equals 1.0}</comment>
  </data>
	<data name="shapeBoxOutgoingBlanks" xml:space="preserve">
    <value>With the exception of diverging application logic, only one blank connector can exit this shape.</value>
  </data>
	<data name="shapeConnectedToBothEnds" xml:space="preserve">
    <value>The same Action Shape or Jump Object may not be connected to both ends of a connector.</value>
  </data>
	<data name="shapeDeleted" xml:space="preserve">
    <value>Shape has been deleted.</value>
  </data>
	<data name="shapeIndexIsInvalidFormat" xml:space="preserve">
    <value>Shape Index {0} is in valid on page {1}.</value>
    <comment>0=shapeIndex; 1=pageIndex</comment>
  </data>
	<data name="spaceString" xml:space="preserve">
    <value>&#32;</value>
  </data>
	<data name="statusBarReadyMessage" xml:space="preserve">
    <value>Ready</value>
  </data>
	<data name="tableVisibleLinkFormat" xml:space="preserve">
    <value>Document: {0}, Row: {1}, Column: {2}.</value>
    <comment>0=FileName; 1=row; 2=column</comment>
  </data>
	<data name="theProjectWillCloseAndReopen" xml:space="preserve">
		<value>The project will close and reopen.</value>
	</data>
	<data name="titleBarCloseContextMenuText" xml:space="preserve">
    <value>Close</value>
  </data>
	<data name="truncatedMessageTextFormat" xml:space="preserve">
    <value>{0} ...</value>
    <comment>0=truncated message</comment>
  </data>
	<data name="twoApplicationsMinimum" xml:space="preserve">
    <value>To use application connectors a minimum of two applications must be configured. Select Project/Project Properties and the Applications tab to add applications.</value>
  </data>
	<data name="typeNotAssignableFormat" xml:space="preserve">
    <value>The type "{0}" is not assignable to "{1}".</value>
    <comment>0=typeWeAreValidating;1=assignedToType</comment>
  </data>
	<data name="typeReferenceNameIsInvalidFormat" xml:space="preserve">
    <value>Fully Qualified Type Reference Name field for function {0} is invalid. Fully Qualified Class Names must start with an alpha character or underscore and can contain only alphanumeric characters, periods, plus (+) characters and underscores.</value>
    <comment>0=functionName</comment>
  </data>
	<data name="typeReferenceNameIsInvalidConstructorFormat" xml:space="preserve">
    <value>Fully Qualified Type Reference Name field for constructor {0} is invalid. Fully Qualified Class Names must start with an alpha character or underscore and can contain only alphanumeric characters, periods, plus (+) characters and underscores.</value>
    <comment>0=functionName</comment>
  </data>
	<data name="typeReferenceNameIsInvalidFormatVariable" xml:space="preserve">
    <value>Fully Qualified Type Name field for variable {0} is invalid. Fully Qualified Class Names must start with an alpha character or underscore and can contain only alphanumeric characters, periods, plus (+) characters and underscores.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="underscore" xml:space="preserve">
    <value>_</value>
  </data>
	<data name="unhandledEventLoggerExceptionFormat" xml:space="preserve">
    <value>The event logger has generated an unhandled exception of type: "{0}". Message: "{1}".</value>
  </data>
	<data name="unsuccessfulProjectDeletion" xml:space="preserve">
    <value>Not all project files were successfully removed. The remaining files must be manually deleted.</value>
  </data>
	<data name="validApplicationSpecificShapes" xml:space="preserve">
    <value>Shapes that can be connected to an Application Specific Connector are as follows: "Action", "Merge", "Module", "Wait Condition", "Wait Decision".</value>
  </data>
	<data name="validationSuccessful" xml:space="preserve">
    <value>Validation Successful!</value>
  </data>
	<data name="validConstructorMustBeSelected" xml:space="preserve">
    <value>A valid constructor must be selected.</value>
  </data>
	<data name="validFunctionMustBeSelected" xml:space="preserve">
    <value>A valid function must be selected.</value>
  </data>
	<data name="validVariableMustBeSelected" xml:space="preserve">
    <value>A valid variable must be selected.</value>
  </data>
	<data name="varConfigCastReferenceAsHelp" xml:space="preserve">
    <value>Each segment (period delimited) contains a tile (~)(no cast required) or the fully qualified class name for the corresponding segment in the Reference Name when a cast is required for the segment.</value>
  </data>
	<data name="varConfigCastVariableAsHelp" xml:space="preserve">
    <value>Fully qualified class name to cast the variable to when a cast is required.</value>
  </data>
	<data name="varConfigCommentsHelp" xml:space="preserve">
    <value>Summarizes the purpose of the variable.</value>
  </data>
	<data name="varConfigDefaultValueHelp" xml:space="preserve">
    <value>Specify a default value for the argument.</value>
  </data>
	<data name="varConfigDomainHelp" xml:space="preserve">
    <value>List of choices for populating a literal.</value>
  </data>
	<data name="varConfigElementControlHelp" xml:space="preserve">
    <value>Control used to update a list element value at design-time.</value>
  </data>
	<data name="varConfigFolderNameHelp" xml:space="preserve">
    <value>Unique name for the folder.</value>
  </data>
	<data name="varConfigListControlHelp" xml:space="preserve">
    <value>Control used for the list at design time. It can be a list form or hashset form.</value>
  </data>
	<data name="varConfigListDefaultValueHelp" xml:space="preserve">
    <value>Specify a list of default values for the argument.</value>
  </data>
	<data name="varConfigListTypeHelp" xml:space="preserve">
    <value>Array, genric list or generic collection.</value>
  </data>
	<data name="varConfigLiteralControlHelp" xml:space="preserve">
    <value>Control used for a literal at design-time.</value>
  </data>
	<data name="varConfigLiteralTypeHelp" xml:space="preserve">
    <value>Literal type.</value>
  </data>
	<data name="varConfigNameHelp" xml:space="preserve">
    <value>Unique name for the variable used in the flow diagram.</value>
  </data>
	<data name="varConfigObjectTypeHelp" xml:space="preserve">
    <value>Object Type.</value>
  </data>
	<data name="varConfigPropertySourceHelpFormat" xml:space="preserve">
    <value>Specify the fully qualified class as a source for a public properties domain when the {0} is "{1}".</value>
    <comment>0=control label for input type;1=string describing LiteralInputStyle.PropertyInput</comment>
  </data>
	<data name="varConfigReferenceCategoryHelp" xml:space="preserve">
    <value>Defines the variable's membership as This, Type, Instance Reference, or Static Reference.</value>
  </data>
	<data name="varConfigReferenceDefinitionHelp" xml:space="preserve">
    <value>Defines each segment (period delimited) of the Reference Name as a field, property or indexer.</value>
  </data>
	<data name="varConfigReferenceNameHelp" xml:space="preserve">
    <value>Used when the Reference Category is a static or instance reference of the Activity Class.</value>
  </data>
	<data name="varConfigTypeNameHelp" xml:space="preserve">
    <value>Fully qualified class name when the Reference Category is a type or a static reference.</value>
  </data>
	<data name="varConfigVariableCategoryHelp" xml:space="preserve">
    <value>Indicates whether the variable is a field, property or indexer.</value>
  </data>
	<data name="varConfigVariableNameHelp" xml:space="preserve">
    <value>Member name for the class field or property.</value>
  </data>
	<data name="variableAlreadyConfiguredFormat" xml:space="preserve">
    <value>{0} was already configured.</value>
    <comment>0=variable</comment>
  </data>
	<data name="variableArrayIndexIsInvalid" xml:space="preserve">
    <value>Given the variable category, each index in Member Name must be a configured integer variable or positive integer.</value>
  </data>
	<data name="variableBlankCategoryFormat" xml:space="preserve">
    <value>Reference Category for variable "{0}" cannot be empty.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="variableBlankDefinition" xml:space="preserve">
    <value>Reference Definition cannot be empty when the reference category is "Static Reference" or reference category is "Instance Reference".</value>
  </data>
	<data name="variableCastRefAsAndDefinitionFormat2" xml:space="preserve">
    <value>When it is not empty, Cast Reference As and Reference Name must have an equal number of sections when the variable is indirectly referenced by the Activity Class. e.g. Reference Name = foo.Bar.1.boz, Cast Reference As = ~.~.~."MyNameSpace.MyClass" (Use a tilde (~) where a cast is not needed. Use quotes as a text qualifier when the fully qualified class name contains a period).</value>
  </data>
	<data name="variableDefinitionNotEmpty" xml:space="preserve">
    <value>Reference Definition must be empty when the reference category is "This" or reference category is "Type".</value>
  </data>
	<data name="variableExistsFormat" xml:space="preserve">
    <value>A variable with the name "{0}" already exists.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="variableIndexCannotBeSelfFormat" xml:space="preserve">
    <value>The variable index in the Variable Name field, cannot be used to reference itself. Variable: "{0}".</value>
    <comment>0=variableName</comment>
  </data>
	<data name="variableInvalidCategoryFormat" xml:space="preserve">
    <value>Variable "{0}" has invalid Reference Category "{1}". Valid categories are:{2}{3}.</value>
    <comment>0=variableName; 1=Referencecategory; 2=Environment.Newline; 3=ValidCategoryList</comment>
  </data>
	<data name="variableInvalidIndirectDefinitionFormat" xml:space="preserve">
    <value>Variable "{0}" has invalid section "{1}" in its Reference Definition Field. Valid sections for indirect references include:{2}{3}.</value>
    <comment>0=variableName; 1=ReferenceDefinition; 2=Environment.Newline; 3=ValidDefinitionList</comment>
  </data>
	<data name="variableInvalidIndirectDefinitionFormat2" xml:space="preserve">
    <value>Reference Definition has invalid section "{0}". Valid sections for indirect references include:{1}{2}.</value>
    <comment>0=ReferenceDefinition; 1=Environment.Newline; 2=ValidDefinitionList</comment>
  </data>
	<data name="variableKeyIndexIsInvalid" xml:space="preserve">
    <value>Given the variable category, Member Name must be a configured variable.</value>
  </data>
	<data name="variableNameAndDefinitionFormat" xml:space="preserve">
    <value>Variable "{0}". Reference Name and Reference Definition must have an equal number of sections when the variable is indirectly referenced by the Activity Class. e.g. Reference Name = foo.Bar.1.boz, Reference Category = Field.Property.IntKeyValue.Field.</value>
    <comment>0=VariableName</comment>
  </data>
	<data name="variableNameAndDefinitionFormat2" xml:space="preserve">
    <value>Reference Name and Reference Definition must have an equal number of sections when the variable is indirectly referenced by the Activity Class. e.g. Reference Name = foo.Bar.1.boz, Reference Category = Field.Property.IntKeyValue.Field.</value>
  </data>
	<data name="variableNotAssignableFormat" xml:space="preserve">
    <value>The variable "{0}" must be assignable to "{1}".</value>
    <comment>0=variableName;1=objectType</comment>
  </data>
	<data name="variableReferenceDefinitionMustBeEmptyFormat" xml:space="preserve">
    <value>Reference Definition field for variable {0} must be empty when the reference category is "This" or reference category is "Type".</value>
    <comment>0=VariableName</comment>
  </data>
	<data name="variableReferenceInfoMustBePopulatedFormat" xml:space="preserve">
    <value>Reference Name and Reference Definition field for variable {0} must be populated when the reference category is "Instance Reference" or reference category is "Static Reference".</value>
    <comment>0=VariableName</comment>
  </data>
	<data name="variableReferenceMustBeEmptyFormat" xml:space="preserve">
    <value>Reference Name field for variable {0} must be empty when the reference category is "This" or reference category is "Type".</value>
    <comment>0=VariableName</comment>
  </data>
	<data name="variablesRootNodeText" xml:space="preserve">
    <value>Variables</value>
  </data>
	<data name="variableTypeFormat" xml:space="preserve">
    <value>Type: {0}</value>
    <comment>0=Type description</comment>
  </data>
	<data name="variableTypeNameMustBeEmpty" xml:space="preserve">
    <value>Type Name field must be empty when the reference category is not "Type"or "Static Reference".</value>
  </data>
	<data name="variableTypeNameMustBeEmptyFormat" xml:space="preserve">
    <value>Type Name field for  variable {0} must be empty when the reference category is not "Type"or "Static Reference".</value>
  </data>
	<data name="variableVisibleTextBegin" xml:space="preserve">
    <value>&lt;</value>
    <comment>Must be a string with length==1 i.e. character</comment>
  </data>
	<data name="variableVisibleTextEnd" xml:space="preserve">
    <value>&gt;</value>
    <comment>Must be a string with length==1 i.e. character</comment>
  </data>
	<data name="waitConditionShapeDataRequired" xml:space="preserve">
    <value>Wait Condition Shape requires data.</value>
  </data>
	<data name="waitConditionShapeIncomingRequired" xml:space="preserve">
    <value>Wait Condition Shape requires at least one incoming connector.</value>
  </data>
	<data name="waitConditionShapeOutgoingRequired" xml:space="preserve">
    <value>Wait Condition Shape requires exactly one outgoing  blank connector.</value>
  </data>
	<data name="waitDecisionShapeDataRequired" xml:space="preserve">
    <value>Wait Decision Shape requires data.</value>
  </data>
	<data name="waitDecisionShapeIncomingRequired" xml:space="preserve">
    <value>Wait Decision Shape requires at least one incoming connector.</value>
  </data>
	<data name="waitDecisionShapeOutgoingRequired" xml:space="preserve">
    <value>Wait Decision Shape requires exactly one outgoing  blank connector.</value>
  </data>
	<data name="enumDescriptionAny" xml:space="preserve">
    <value>Any</value>
  </data>
	<data name="enumDescriptionBoolean" xml:space="preserve">
    <value>Boolean</value>
  </data>
	<data name="enumDescriptionDateTime" xml:space="preserve">
    <value>DateTime</value>
  </data>
	<data name="enumDescriptionDateTimeOffset" xml:space="preserve">
    <value>DateTimeOffset</value>
  </data>
	<data name="enumDescriptionDateOnly" xml:space="preserve">
    <value>DateOnly</value>
  </data>
	<data name="enumDescriptionDate" xml:space="preserve">
    <value>DateTime</value>
  </data>
	<data name="enumDescriptionTimeSpan" xml:space="preserve">
    <value>TimeSpan</value>
  </data>
	<data name="enumDescriptionTimeOnly" xml:space="preserve">
    <value>TimeOnly</value>
  </data>
	<data name="enumDescriptionTimeOfDay" xml:space="preserve">
    <value>TimeOfDay</value>
  </data>
	<data name="enumDescriptionLong" xml:space="preserve">
    <value>Long</value>
  </data>
	<data name="enumDescriptionByte" xml:space="preserve">
    <value>Byte</value>
  </data>
	<data name="enumDescriptionChar" xml:space="preserve">
    <value>Char</value>
  </data>
	<data name="enumDescriptionDouble" xml:space="preserve">
    <value>Double</value>
  </data>
	<data name="enumDescriptionFloat" xml:space="preserve">
    <value>Float</value>
  </data>
	<data name="enumDescriptionShort" xml:space="preserve">
    <value>Short</value>
  </data>
	<data name="enumDescriptionSByte" xml:space="preserve">
    <value>Signed Byte</value>
  </data>
	<data name="enumDescriptionString" xml:space="preserve">
    <value>String</value>
  </data>
	<data name="enumDescriptionUInteger" xml:space="preserve">
    <value>Unsigned Integer</value>
  </data>
	<data name="enumDescriptionULong" xml:space="preserve">
    <value>Unsigned Long</value>
  </data>
	<data name="enumDescriptionUShort" xml:space="preserve">
    <value>Unsigned Short</value>
  </data>
	<data name="enumDescriptionGuid" xml:space="preserve">
    <value>Guid</value>
  </data>
	<data name="enumDescriptionDecimal" xml:space="preserve">
    <value>Decimal</value>
  </data>
	<data name="enumDescriptionInteger" xml:space="preserve">
    <value>Integer</value>
  </data>
	<data name="enumDescriptionNullableDecimal" xml:space="preserve">
    <value>Nullable Decimal</value>
  </data>
	<data name="enumDescriptionNullableInteger" xml:space="preserve">
    <value>Nullable Integer</value>
  </data>
	<data name="enumDescriptionNullableBoolean" xml:space="preserve">
    <value>Nullable Boolean</value>
  </data>
	<data name="enumDescriptionNullableDateTime" xml:space="preserve">
    <value>Nullable DateTime</value>
  </data>
	<data name="enumDescriptionNullableDateTimeOffset" xml:space="preserve">
    <value>Nullable DateTimeOffset</value>
  </data>
	<data name="enumDescriptionNullableDateOnly" xml:space="preserve">
    <value>Nullable DateOnly</value>
  </data>
	<data name="enumDescriptionNullableDate" xml:space="preserve">
    <value>Nullable Date</value>
  </data>
	<data name="enumDescriptionNullableTimeSpan" xml:space="preserve">
    <value>Nullable TimeSpan</value>
  </data>
	<data name="enumDescriptionNullableTimeOnly" xml:space="preserve">
    <value>Nullable TimeOnly</value>
  </data>
	<data name="enumDescriptionNullableTimeOfDay" xml:space="preserve">
    <value>Nullable TimeOfDay</value>
  </data>
	<data name="enumDescriptionNullableGuid" xml:space="preserve">
    <value>Nullable Guid</value>
  </data>
	<data name="enumDescriptionNullableByte" xml:space="preserve">
    <value>Nullable Byte</value>
  </data>
	<data name="enumDescriptionNullableShort" xml:space="preserve">
    <value>Nullable Short</value>
  </data>
	<data name="enumDescriptionNullableLong" xml:space="preserve">
    <value>Nullable Long</value>
  </data>
	<data name="enumDescriptionNullableFloat" xml:space="preserve">
    <value>Nullable Float</value>
  </data>
	<data name="enumDescriptionNullableDouble" xml:space="preserve">
    <value>Nullable Double</value>
  </data>
	<data name="enumDescriptionNullableChar" xml:space="preserve">
    <value>Nullable Char</value>
  </data>
	<data name="enumDescriptionNullableSByte" xml:space="preserve">
    <value>Nullable SByte</value>
  </data>
	<data name="enumDescriptionNullableUShort" xml:space="preserve">
    <value>Nullable UShort</value>
  </data>
	<data name="enumDescriptionNullableUInteger" xml:space="preserve">
    <value>Nullable UInteger</value>
  </data>
	<data name="enumDescriptionNullableULong" xml:space="preserve">
    <value>Nullable ULong</value>
  </data>
	<data name="enumDescriptionVoid" xml:space="preserve">
    <value>Void</value>
  </data>
	<data name="enumDescriptionArray" xml:space="preserve">
    <value>Array</value>
  </data>
	<data name="enumDescriptionGenericList" xml:space="preserve">
    <value>Generic List</value>
  </data>
	<data name="enumDescriptionGenericCollection" xml:space="preserve">
    <value>Generic Collection</value>
  </data>
	<data name="enumDescriptionIGenericList" xml:space="preserve">
    <value>Generic List Interface</value>
  </data>
	<data name="enumDescriptionIGenericCollection" xml:space="preserve">
    <value>Generic Collection Interface</value>
  </data>
	<data name="enumDescriptionIGenericEnumerable" xml:space="preserve">
    <value>Generic Enumerable Interface</value>
  </data>
	<data name="enumDescriptionField" xml:space="preserve">
    <value>Field</value>
  </data>
	<data name="enumDescriptionProperty" xml:space="preserve">
    <value>Property</value>
  </data>
	<data name="enumDescriptionInstanceReference" xml:space="preserve">
    <value>Instance Reference</value>
  </data>
	<data name="enumDescriptionStaticReference" xml:space="preserve">
    <value>Static Reference</value>
  </data>
	<data name="enumDescriptionNone" xml:space="preserve">
    <value>None</value>
  </data>
	<data name="enumDescriptionThis" xml:space="preserve">
    <value>This</value>
  </data>
	<data name="enumDescriptionType" xml:space="preserve">
    <value>Type</value>
  </data>
	<data name="enumDescriptionArrayIndexer" xml:space="preserve">
    <value>ArrayItem</value>
  </data>
	<data name="enumDescriptionIntegerKeyIndexer" xml:space="preserve">
    <value>IntKeyValue</value>
  </data>
	<data name="enumDescriptionStringKeyIndexer" xml:space="preserve">
    <value>StringKeyValue</value>
  </data>
	<data name="enumDescriptionBooleanKeyIndexer" xml:space="preserve">
    <value>BoolKeyValue</value>
  </data>
	<data name="enumDescriptionByteKeyIndexer" xml:space="preserve">
    <value>ByteKeyValue</value>
  </data>
	<data name="enumDescriptionCharKeyIndexer" xml:space="preserve">
    <value>CharKeyValue</value>
  </data>
	<data name="enumDescriptionDateTimeKeyIndexer" xml:space="preserve">
    <value>DateTimeKeyValue</value>
  </data>
	<data name="enumDescriptionDateTimeOffsetKeyIndexer" xml:space="preserve">
    <value>DateTimeOffsetKeyValue</value>
  </data>
	<data name="enumDescriptionDateOnlyKeyIndexer" xml:space="preserve">
    <value>DateOnlyKeyValue</value>
  </data>
	<data name="enumDescriptionDateKeyIndexer" xml:space="preserve">
    <value>DateKeyValue</value>
  </data>
	<data name="enumDescriptionTimeSpanKeyIndexer" xml:space="preserve">
    <value>TimeSpanKeyValue</value>
  </data>
	<data name="enumDescriptionTimeOnlyKeyIndexer" xml:space="preserve">
    <value>TimeOnlyKeyValue</value>
  </data>
	<data name="enumDescriptionTimeOfDayKeyIndexer" xml:space="preserve">
    <value>TimeOfDayKeyValue</value>
  </data>
	<data name="enumDescriptionGuidKeyIndexer" xml:space="preserve">
    <value>GuidKeyValue</value>
  </data>
	<data name="enumDescriptionDecimalKeyIndexer" xml:space="preserve">
    <value>DecimalKeyValue</value>
  </data>
	<data name="enumDescriptionDoubleKeyIndexer" xml:space="preserve">
    <value>DoubleKeyValue</value>
  </data>
	<data name="enumDescriptionFloatKeyIndexer" xml:space="preserve">
    <value>FloatKeyValue</value>
  </data>
	<data name="enumDescriptionLongKeyIndexer" xml:space="preserve">
    <value>LongKeyValue</value>
  </data>
	<data name="enumDescriptionSByteKeyIndexer" xml:space="preserve">
    <value>SByteKeyValue</value>
  </data>
	<data name="enumDescriptionShortKeyIndexer" xml:space="preserve">
    <value>ShortKeyValue</value>
  </data>
	<data name="enumDescriptionUIntegerKeyIndexer" xml:space="preserve">
    <value>UIntKeyValue</value>
  </data>
	<data name="enumDescriptionULongKeyIndexer" xml:space="preserve">
    <value>ULongKeyValue</value>
  </data>
	<data name="enumDescriptionUShortKeyIndexer" xml:space="preserve">
    <value>UShortKeyValue</value>
  </data>
	<data name="enumDescriptionVariableKeyIndexer" xml:space="preserve">
    <value>VariableKeyValue</value>
  </data>
	<data name="enumDescriptionVariableArrayIndexer" xml:space="preserve">
    <value>VariableKeyArrayItem</value>
  </data>
	<data name="enumDescriptionDropDown" xml:space="preserve">
    <value>DropDown</value>
  </data>
	<data name="enumDescriptionMultipleLineTextBox" xml:space="preserve">
    <value>Multiple Line Text box</value>
  </data>
	<data name="enumDescriptionSingleLineTextBox" xml:space="preserve">
    <value>Single Line Text box</value>
  </data>
	<data name="enumDescriptionTypeAutoComplete" xml:space="preserve">
    <value>Type Auto Complete</value>
  </data>
	<data name="enumDescriptionDomainAutoComplete" xml:space="preserve">
    <value>Domain Auto Complete</value>
  </data>
	<data name="enumDescriptionPropertyInput" xml:space="preserve">
    <value>Property Input</value>
  </data>
	<data name="enumDescriptionParameterSourcedPropertyInput" xml:space="preserve">
    <value>Parameter Sourced Property Input</value>
  </data>
	<data name="enumDescriptionParameterSourceOnly" xml:space="preserve">
    <value>Parameter Source Only</value>
  </data>
	<data name="enumDescriptionLiteral" xml:space="preserve">
    <value>Literal</value>
  </data>
	<data name="enumDescriptionObject" xml:space="preserve">
    <value>Object</value>
  </data>
	<data name="enumDescriptionGeneric" xml:space="preserve">
    <value>Generic</value>
  </data>
	<data name="enumDescriptionLiteralList" xml:space="preserve">
    <value>Literal List</value>
  </data>
	<data name="enumDescriptionObjectList" xml:space="preserve">
    <value>Object List</value>
  </data>
	<data name="enumDescriptionListForm" xml:space="preserve">
    <value>List Form</value>
  </data>
	<data name="enumDescriptionHashSetForm" xml:space="preserve">
    <value>Hash Set Form</value>
  </data>
	<data name="enumDescriptionConnectors" xml:space="preserve">
    <value>Connectors</value>
  </data>
	<data name="enumDescriptionFull" xml:space="preserve">
    <value>Full</value>
  </data>
	<data name="enumDescriptionUpdateOnly" xml:space="preserve">
    <value>Update Only</value>
  </data>
	<data name="enumDescriptionAlways" xml:space="preserve">
    <value>Always</value>
  </data>
	<data name="enumDescriptionNever" xml:space="preserve">
    <value>Never</value>
  </data>
	<data name="enumDescriptionNetCore" xml:space="preserve">
    <value>.NET (.NET, .NET Core, UWP)</value>
  </data>
	<data name="enumDescriptionNetFramework" xml:space="preserve">
    <value>.NET Framework (WPF, Windows Forms, ASP.NET)</value>
  </data>
	<data name="enumDescriptionNetNative" xml:space="preserve">
    <value>.NET Native (UWP)</value>
  </data>
	<data name="enumDescriptionXamarin" xml:space="preserve">
    <value>Xamarin (Android, iOS, OS X)</value>
  </data>
	<data name="enumDescriptionBinaryOperator" xml:space="preserve">
    <value>Binary Operator</value>
  </data>
	<data name="enumDescriptionDialogForm" xml:space="preserve">
    <value>Dialog Form</value>
  </data>
	<data name="enumDescriptionStandard" xml:space="preserve">
    <value>Standard</value>
  </data>
	<data name="enumDescriptionBinary" xml:space="preserve">
    <value>Binary</value>
  </data>
	<data name="enumDescriptionSequential" xml:space="preserve">
    <value>Sequential</value>
  </data>
	<data name="fieldPropertyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must start with an alpha character or underscore and can contain only alphanumeric characters and underscores.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="fieldSourceMustBeEmptyFormat" xml:space="preserve">
    <value>{0} must be empty when {1} is not "{2}".</value>
    <comment>0=lblFieldSource;lblLiteralInputTypeControl;ProperyInputText</comment>
  </data>
	<data name="arrayKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", each index in Reference Name "{1}" for variable "{2}" must be an integer greater than or equal to zero.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="booleanKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be a boolean.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="byteKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type byte.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="charKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type char.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="dateTimeKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type DateTime.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="dateTimeOffsetKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type DateTimeOffset.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="dateOnlyKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type DateOnly.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="dateKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type Date.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="timeSpanKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type TimeSpan.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="timeOnlyKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type TimeOnly.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="timeOfDayKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type TimeOfDay.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="guidKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type Guid.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="decimalKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type decimal.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="doubleKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type double.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="floatKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type float.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="integerKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be an integer.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="longKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type long.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="sbyteKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type sbyte.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="shortKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be of type short.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="uIntegerKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be an unsigned integer.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="uLongKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be an unsigned long integer.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="uShortKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be an unsigned short integer.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="variableKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for variable "{2}" must be a configured variable.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="variableArrayKeyReferenceIsInvalidFormat2" xml:space="preserve">
    <value>Given the reference definition "{0}", each index in Reference Name "{1}" for variable "{2}" must be a configured integer variable or positive integer.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=variableName</comment>
  </data>
	<data name="fieldPropertyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must start with an alpha character or underscore and can contain only alphanumeric characters and underscores.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="arrayKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", each index in Reference Name "{1}" for function "{2}" must be an integer greater than or equal to zero.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="booleanKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be a boolean.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="byteKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type byte.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="charKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type char.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="dateTimeKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type DateTime.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="dateTimeOffsetKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type DateTimeOffset.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="dateOnlyKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type DateOnly.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="dateKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type Date.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="timeSpanKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type TimeSpan.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="timeOnlyKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type TimeOnly.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="timeOfDayKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type TimeOfDay.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="guidKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type Guid.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="decimalKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type decimal.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="doubleKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type double.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="floatKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type float.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="integerKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be an integer.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="longKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type long.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="sbyteKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type sbyte.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="shortKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be of type short.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="uIntegerKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be an unsigned integer.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="uLongKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be an unsigned long integer.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="uShortKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be an unsigned short integer.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="variableKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", Reference Name "{1}" for function "{2}" must be a configured variable.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="variableArrayKeyReferenceIsInvalidFormat3" xml:space="preserve">
    <value>Given the reference definition "{0}", each index in Reference Name "{1}" for function "{2}" must be a configured integer variable or positive integer.</value>
    <comment>0=referenceDefinition; 1=referenceName; 2=functionName</comment>
  </data>
	<data name="variableNameIsInvalidFormat" xml:space="preserve">
    <value>Variable Name Field for variable "{0}" is invalid. Variable or function names must start with an alpha character or underscore and can contain only alphanumeric characters and underscores.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="arrayKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, each index in Member Name for variable {0}, must be an integer greater than or equal to zero.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="booleanKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be a boolean.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="byteKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type byte.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="charKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type char.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="dateTimeKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type DateTime.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="dateTimeOffsetKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type DateTimeOffset.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="dateOnlyKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type DateOnly.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="dateKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type Date.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="timeSpanKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type TimeSpan.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="timeOnlyKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type TimeOnly.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="timeOfDayKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type TimeOfDay.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="guidKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type Guid.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="decimalKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type decimal.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="doubleKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type double.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="floatKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type float.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="integerKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be an integer.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="longKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type long.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="sbyteKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type sbyte.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="shortKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be of type short.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="uIntegerKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be an unsigned integer.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="uLongKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be an unsigned long integer.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="uShortKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be an unsigned short integer.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="variableKeyIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, Member Name for variable {0} must be a configured variable.</value>
    <comment>0=variableName</comment>
  </data>
	<data name="variableArrayIndexIsInvalidFormat" xml:space="preserve">
    <value>Given the variable category, each index in Member Name for variable {0} must be a configured integer variable or positive integer.</value>
    <comment>0=variableName</comment>
  </data>
</root>